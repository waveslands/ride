{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE LIBRARY #-}

let LANDPREFIX = "LAND"
let DUCKPREFIX = "DUCK"
let ROBO_PREFIX = "ROBO"
let ARTPRESALE = "PRESALE"
let ARTONBOARD = "ONBOARD"
let NUMRES = 6
let MAX_LANDS_STAKED_BY_USER = 25
let DAILYRESBYPIECE = 345_6000 # 0.03456000 (base value)
let WHMULTIPLIER = 100_0000_0000
let DEFAULTLOCATION = "Africa_F_Africa"
let RESOURCEPRICEMIN = 39637 # (was 158549): 0.03456000 * 25 * 0.039637 * 365 = 12.5 USDT (5% APR)
let ESMAXPACKAGES = 10 # was: 3
let ESBUYCOEF = 4
let ESSELLCOEF = 10
let MIN_USDT_FEE_DELIVERY = 50000 # 0.05 USDT
let MIN_USDT_FEE_DELIVERY15 = 75000 # 0.075 USDT
let CRAFT_USDT_COST = 1_000_000 # 1 USDT
let CRAFT_DELIVERY_COEFF = 10
let USDT2ACRES_MULTIPLIER = 10 # 10_000_000 usdt = 1_0000_0000 acre, so acresAmount8 = usdtAmount6 * USDT2ACRES_MULTIPLIER
let TEN_MINUTES_MILLIS = 600_000 # 10*60*1000
let MIN_WLGOLD_ROBBERY = 1_0000_0000 # 1 WLGOLD
let ALLOWED_FREE_ROBBERIES = 0
let ACRES_FOR_ROBBERY_ATTEMPT = 2_0000_0000 # 2.0
let ALLOWED_FREE_DELIVERIES = 0
let ACRES_FOR_DELIVERY_ATTEMPT = 2_0000_0000 # 2.0
let resTypes = ["Oil", "Ore", "Wood", "Sand", "Clay", "Organic"]
let matTypes = ["Fuel", "Metal", "Plank", "Glass", "Plastic", "Protein"]
let prodTypes = [
  "First Aid Kit L1", "First Aid Kit L2", "First Aid Kit L3",
  "Backpack L1", "Backpack L2", "Backpack L3",
  "Food Ration L1", "Food Ration L2", "Food Ration L3",
  "Jet Pack L1", "Jet Pack L2", "Jet Pack L3",
  "Shield L1", "Shield L2", "Shield L3",
  "Mine L1", "Mine L2", "Mine L3", 
  "Trap L1", "Trap L2", "Trap L3",
  "Boom-Dog L1", "Boom-Dog L2", "Boom-Dog L3"
  ]
  
let continents = ["Americas", "Europe", "Asia", "Africa", "Oceania"]

let contIdxAmericas = 0
let contIdxEurope = 1
let contIdxAsia = 2
let contIdxAfrica = 3
let contIdxOceania = 4

let COEFF2MAT = 1000_0000 # recipe materials are 1 decimal, but we need 8, so it is converting coeff

let slotNames = ["backpack", "back", "belt", "hands", "head", "body"] # segments

let fortAllowedProds = [15, 16, 17, 18, 19, 20, 21, 22, 23]

let productionMatrix = [ # up to 250 recipes (50 per continent); fuel, metal, plank, glass, plastic, protein - 2 (was 1) decimal, 
# coeff=1 decimal, continent, effect, requirements, slots allowed
  # Americas {(0.08+0.08+0.08+0.17+0.17+0.42)*1.2 = 1.2}
  "8_8_8_17_17_42_12_0_30_0,0,0,0,0,0,0_", # 00 Аптечка1, Восстанавливает 30 hp => 1.2 materials to craft
  "8_8_8_17_17_42_24_0_60_0,0,5,2,0,0,0_", # 01 Аптечка2, 60 hp => 2.4 mat
  "8_8_8_17_17_42_36_0_120_0,0,10,4,0,0,0_", # 02 Аптечка3, 120 hp => 3.6 mat
  # Europe {(0.08+0.19+0.19+0.08+0.27+0.19)*2.6 = 2.6}
  "8_19_19_8_27_19_26_1_20_0,0,0,0,0,0,0_001", # 03 Рюкзак1, Увеличивает кол-во переносимого груза (20) => 2.6 mat
  "8_19_19_8_27_19_52_1_40_0,0,0,0,0,0,0_001", # 04 Рюкзак2, (40) => 5.2 mat
  "8_19_19_8_27_19_78_1_80_0,0,0,0,0,0,0_001", # 05 Рюкзак3, (80) => 7.8 mat
  # Asia {(0.08+0.08+0.08+0.08+0.08+0.6)*1.3 = 1.3}
  "8_8_8_8_8_60_13_2_2_0,0,0,0,0,0,0_011", # 06 Рацион1, Увеличивает показатели (+2) ко всем параметрам персонажа => 1.3 mat
  "8_8_8_8_8_60_26_2_4_0,0,0,0,0,0,0_011", # 07 Рацион2, (+4) => 2.6 mat
  "8_8_8_8_8_60_39_2_8_0,0,0,0,0,0,0_011", # 08 Рацион3, (+8) => 3.9 mat
  # Africa {(0.3+0.3+0.03+0.17+0.17+0.03)*3 = 3}
  "30_30_3_17_17_3_30_3_30_0,0,0,0,0,0,0_111", # 09 Реактивный ранец1, Уменьшает шанс столкновения с воздушными препятствиями (30%) => 3.0 mat
  "30_30_3_17_17_3_60_3_50_0,0,0,0,0,0,0_111", # 10 Реактивный ранец2, (50%) => 6.0 mat
  "30_30_3_17_17_3_90_3_70_0,0,0,0,0,0,0_111", # 11 Реактивный ранец3, (70%) => 9.0 mat
  # Oceania {(0.18+0.18+0.1+0.18+0.18+0.18)*1.1 = 1.1}
  "18_18_10_18_18_18_11_4_10_0,0,0,0,0,0,0_201", # 12 Силовое поле1, Уменьшает кол-во урона (10 hp) => 1.1 mat
  "18_18_10_18_18_18_22_4_20_0,0,0,0,0,0,0_201", # 13 Силовое поле2, (20 hp) => 2.2 mat
  "18_18_10_18_18_18_33_4_30_0,0,0,0,0,0,0_201", # 14 Силовое поле3, (30 hp) => 3.3 mat
  # Americas {(0.04+0.13+0.22+0.04+0.35+0.22)*2.3}
  "4_13_22_4_35_22_23_0_50,1,0_0,0,0,0,0,0,0_", # 15 Мина1, Урон 50hp на местности в радиусе 1 + пропуск 0 ходов => 2.3 mat
  "4_13_22_4_35_22_46_0_50,1,1_0,2,5,0,0,0,0_", # 16 Мина2, Урон 50hp на местности в радиусе 1 + пропуск 1 ходов => 4.6 mat
  "4_13_22_4_35_22_69_0_50,2,1_0,5,10,0,0,0,0_", # 17 Мина3, Урон 50hp на местности в радиусе 2 + пропуск 1 ходов => 6.9 mat
  # Europe {(0.05+0.25+0.4+0.05+0.1+0.15)*2 = 2}
  "5_25_40_5_10_15_20_1_30,1,1_0,0,0,0,0,0,0_", # 18 Капкан1, Урон 30hp на местности	в радиусе 1 + пропуск 1 ходов => 2.0 mat
  "5_25_40_5_10_15_40_1_30,1,2_2,1,3,0,0,0,0_", # 19 Капкан1, Урон 30hp на местности	в радиусе 1 + пропуск 2 ходов => 4.0 mat
  "5_25_40_5_10_15_60_1_30,1,3_5,2,8,0,0,0,0_", # 20 Капкан1, Урон 30hp на местности	в радиусе 1 + пропуск 3 ходов => 6.0 mat
  # Asia {(0.23+0.23+0.05+0.20+0.23+0.06)*3.5 = 3.5}
  "23_23_5_20_23_6_35_2_100_0,0,0,0,0,0,0_", # 21 Собака1, Урон 100hp при столкновении с грабителем => 3.5 mat
  "23_23_5_20_23_6_70_2_150_0,0,0,0,0,0,0_", # 22 Собака2, Урон 150hp при столкновении с грабителем => 7.0 mat
  "23_23_5_20_23_6_105_2_200_0,0,0,0,0,0,0_"  # 23 Собака3, Урон 200hp при столкновении с грабителем => 10.5 mat
]
 
let rIdxFuel = 0
let rIdxMetal = 1
let rIdxPlank = 2
let rIdxGlass = 3
let rIdxPlastic = 4
let rIdxProtein = 5
let rIdxCoeff = 6
let rIdxContinent = 7
let rIdxEffect = 8
let rIdxRequirements = 9 # Strength, Accuracy, Intellect, Endurance, Dexterity, Level, Health
let rIdxSlots = 10 # segment idx, main(0) or aux(1), number of slots occupied. 2-slot items use slot0 (slot1 becomes not available)
let RECIPESIZE = 11

let PRODUCTPKGSIZE = 10

# warehouse groups:
let whIdxLevels = 0 # warehouse volume (3 * (infaLevel + 1) * landIndex)
let whIdxRes = 1 # resList
let whIdxMat = 2 # matList
let whIdxProd = 3 # prodList
let whIdxLOFT = 4 # warehouse locked_occupied_free_total volume

# warehouse volume groups:
let volLocked = 0
let volOccupied = 1
let volFree = 2
let volTotal = 3

# backpack groups:
let bpIdxLevel = 0 # upgradeLevel
let bpIdxRes = 1 # resList
let bpIdxMat = 2 # matList
let bpIdxProd = 3 # prodList

let locIdxContinent = 0
# L|F|M|A
let locIdxType = 1
let locIdxId = 2

func keyLandAssetIdToOwner(assetId: String) = "no_" + assetId
func keyLandAssetIdToCustomName(assetId: String) = "lcna_" + assetId
func keyStakedTimeByAssetId(assetId: String) = "st_" + assetId # both land and duck assets
func keyLandArtStatusByTypeAndAssetId(type: String, assetId: String) = makeString(["las", type, assetId], "_")
func keyStakedTimeByTypeAssetIdAndOwner(nftType: String, assetId: String, ownerAddr: String) =
    "sttao_" + nftType + "_" + assetId + "_" + ownerAddr # both land and duck assets
func keyWarehouseByLand(landAssetId: String) = "wh_" + landAssetId

func keyInfraLevelByAssetId(assetId: String) = "infraLevel_" + assetId
func keyFortificationsByLand(landAssetId: String) = "fortifications_" + landAssetId
func keyDuckAssetIdToCustomName(assetId: String) = "duckCustomNameByAssetId_" + assetId
func keyAddressToCustomName(addr: String) = "accountCustomNameByAddr_" + addr
func keyAddressRefBy(addr: String) = "accRefBy_" + addr # if present, then addr has/had ONBOARD artifact
func keyOnboardArtActivatedOnDuck(duckAssetId: String) = "onboardArtActivatedOnDuck_" + duckAssetId # if present, then ONBOARD artifact is activated on duckAssetId by address (value)
func keyOnboardArtDuckActivatedBy(addr: String) = "onboardArtActivatedDuckBy_" + addr # if present, then ONBOARD artifact is activated by addr on duckAssetId (value)
func keyAddressReferrals(addr: String) = "accReferrals_" + addr
func keyDuckIdToOwner(assetId: String) = "duckOwner_" + assetId
func keyStakedDuckByOwner(ownerAddr: String) = "stakedDuckByOwner_" + ownerAddr
func keyBackpackByDuck(duckAssetId: String) = "backPack_" + duckAssetId
func keyDuckLocation(duckAssetId: String) = "duckLocation_" + duckAssetId # continent_locType_id
# governance keys
func keyUserGwlReleaseTime(userAddr: String) = "%s%s__userGwlReleaseTime__" + userAddr
func keyOrderByLand(landAssetId: String) = "landOrder_" + landAssetId
# economics contract
func keyEsWarehouse() = "emergencyWarehouseProducts"
let deliveryFundKey = "deliveryFund"
# tournament contract
let lastTourIdKey = "%s__lastTourId"
func keyTourStaticDataById(tId: Int) = "%s%d__tourStaticData__" + tId.toString()
func keyTourDynamicDataById(tId: Int) = "%s%d__tourDynamicData__" + tId.toString()
func keyScoreBoardByTour(tId: Int) = "%s%d__scoreBoard__" + tId.toString()
func keySumScoresByTour(tId: Int) = "%s%d__sumScores__" + tId.toString()
func keyUnpaidRewardsByTour(tId: Int) = "%s%d__unpaidRewards__" + tId.toString()
func keyLastRegisteredTourByDuck(duckAssetId: String) = "%s%s__lastRegisteredTourByDuck__" + duckAssetId
func keyIsRegisteredByTourAndDuck(tId: Int, duckAssetId: String) = makeString(["%s%d%s__isRegisteredByTourAndDuck", tId.toString(), duckAssetId], "__")
func keyIsAwardedByTourAndDuck(tId: Int, duckAssetId: String) = makeString(["%s%d%s__isAwardedByTourAndDuck", tId.toString(), duckAssetId], "__")
# payed attempts iterator by duck
func keyLastAttemptByTourAndDuck(tId: Int, duckAssetId: String) = makeString(["%s%d%s__lastAttemptByTourAndDuck", tId.toString(), duckAssetId], "__")
func keyBestResultByTourAndDuck(tId: Int, duckAssetId: String) = makeString(["%s%d%s__bestResultByTourAndDuck", tId.toString(), duckAssetId], "__")
func keyBestTxByTourAndDuck(tId: Int, duckAssetId: String) = makeString(["%s%d%s__bestTxByTourAndDuck", tId.toString(), duckAssetId], "__")

let idxStatic = 0
let idxDynamic = 1

# indices to access tournament data fields (static)
let tStaticTournamentTxId = 1
let tStaticRegisterCost   = 2
let tStaticAttemptCost    = 3
let tStaticCreationTime   = 4
let tStaticStart          = 5
let tStaticEnd            = 6
let tStaticNumGrands      = 7
let tStaticPrizeFund      = 8
let tStaticAsset          = 9
# indices to access dynamic data
let tDynamicStatus        = 1 # CREATED, INPROGRESS, PROCESSING, ARCHIVED
let tDynamicLeaders       = 2
let tDynamicWinResult     = 3
let tDynamicTotalRegCount = 4 # count * registerCost = registerSum
let tDynamicTotalAttempts = 5 # attempts * attemptCost = attemptsSum

func getTourData(tourContract: Address, tId: Int) = {
  let static = tourContract.getString(keyTourStaticDataById(tId)).valueOrErrorMessage("Error reading tournament " + tId.toString() + " data").split("__")
  let dynamic = tourContract.getString(keyTourDynamicDataById(tId)).valueOrErrorMessage("Error reading tournament " + tId.toString() + " data").split_4C("__")
  [static, dynamic]
}

# acres contract
func keyIsAwardedByPromoAndUser(promoId: Int, addr: String) = makeString(["%s%d%s__isAwardedByPromoAndUser", promoId.toString(), addr], "__")
func keyTicketsTotalByPromo(promoId: Int) = "%s%d__ticketsTotalByPromo__" + promoId.toString()
func keyTicketsTotalByPromoAndRound(promoId: Int, roundId: Int) = makeString(["%s%d%d__ticketsTotalByPromoAndRound", promoId.toString(), roundId.toString()], "__")

# check whether location belongs to actual tournament
func isInTournament(tourContract: Address, location: String) = {
  let lastId = tourContract.getInteger(lastTourIdKey).valueOrElse(0)
  let loc = location.split("_")
  # location = continent_type_id; For tournaments: tId_T_distance
  let now = lastBlock.timestamp
  let tData = tourContract.getTourData(lastId)
  let static = tData[idxStatic]
  let dynamic = tData[idxDynamic]
  loc[locIdxType] == "T" && loc[locIdxContinent].parseIntValue() == lastId && 
    dynamic[tDynamicStatus] == "INPROGRESS" && now < static[tStaticEnd].parseIntValue()
}

# check whether location belongs to actual delivery
func isInDelivery(location: String) = {
  let loc = location.split("_")
  # location = continent_type_id; For deliveries: startTime_D_distance
  let now = lastBlock.timestamp
  let startTime = loc[locIdxContinent].parseIntValue()
  let distance = loc[locIdxId].parseIntValue()
  loc[locIdxType] == "D" && now < startTime + TEN_MINUTES_MILLIS && distance <= 3
}

# check whether location belongs to actual tournament
func onMission(tourContract: Address, location: String) = {
  let lastId = tourContract.getInteger(lastTourIdKey).valueOrElse(0)
  let loc = location.split("_")
  # location = continent_type_id; For tournaments: tId_T_distance
  let now = lastBlock.timestamp
  let tData = tourContract.getTourData(lastId)
  let static = tData[idxStatic]
  let dynamic = tData[idxDynamic]
  let locType = loc[locIdxType]
  loc[locIdxType] == "T" && loc[locIdxContinent].parseIntValue() == lastId && 
    dynamic[tDynamicStatus] == "INPROGRESS" && now < static[tStaticEnd].parseIntValue()
}

func getRecipeMaterials(recipe: List[String]) = {
  recipe[rIdxCoeff].parseIntValue() * COEFF2MAT
}

func cheatAttempt(oldLoc: String, newLoc: String, cheatCase: Int) = {
  throw("Cheat attempt: oldLoc=" + oldLoc + ", newLoc=" + newLoc + ", case=" + cheatCase.toString())
}