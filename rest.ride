{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT common.ride,landlib.ride,rpglib.ride,wlglib.ride #-}

let USDTPRIZEPART = 500_000 # 0.5

let adminsList = [
  this.toString(),
  match(chain) {
    case base16'57' => "3P64qEVzuGzBJuYfDXYisFtokJChSRa8uja"
    case base16'54' => "3MzUNHF52B4YSqy2shiRGVdHVLQuHmcDQCP"
    case _ => throw("Unknown chain")
  }
]

func asListIntCompacted(val: Any) = {
  match val {
    case valAnyList: List[Any] => {
      if (valAnyList.size() != NUMRES) then throw("Array size is " + valAnyList.size().toString()) else
      func conv(acc: List[String], item: Any) = {
        match item {
          case it: Int => acc :+ it.toString()
          case _ => throw("List type is not Int")
        }
      }
      let r = FOLD<6>(valAnyList, [], conv)
      makeString(r, "_")
    }
    case _ => throw("fail to cast into List")
  }
}

func asSplitResult(val: Any) = {
  match val {
    case t2: (List[Any], List[Any]) => (asListIntCompacted(t2._1), asListIntCompacted(t2._2))
    case _ => throw("fail to cast into (List, List)")
  }
}

func asCancelOrderResult(val: Any) = {
  match val {
    case t2: (Boolean, String) => t2
    case _ => throw("fail to cast into (Boolean, String)")
  }
}

func walletInternal(userAddressOpt: String) = {
  let addr = addressFromString(userAddressOpt)
  let balance = if (addr.isDefined()) then addr.value().wavesBalance() else BalanceDetails(0, 0, 0, 0)
  let usdtBalance = if (addr.isDefined()) then assetBalance(addr.value(), usdtAssetId) else 0
  let wlgoldBalance = if (addr.isDefined()) then assetBalance(addr.value(), wlgAssetId) else 0
  let customName = stakingContract.getString(keyAddressToCustomName(userAddressOpt)).valueOrElse(userAddressOpt)
  let refByKey = keyAddressRefBy(userAddressOpt)
  let refBy = stakingContract.getString(refByKey)
  let refs = stakingContract.getString(keyAddressReferrals(userAddressOpt)).valueOrElse("")
  let lastTxId = stakingContract.getString(keyLastTxIdByUser(userAddressOpt)).valueOrElse("")
  let pieces = getVotingPower(userAddressOpt)[IdxEffUser]
  let xp = stakingContract.getInteger(keyUserXP(userAddressOpt)).valueOrElse(0)
  let lvl = stakingContract.getInteger(keyUserLevel(userAddressOpt)).valueOrElse(0)
  let freePoints = stakingContract.getInteger(keyUserFreePoints(userAddressOpt)).valueOrElse(0)
  let virtWlgData = wlgContract.invoke("checkWlgXpREADONLY", [userAddressOpt], []).exactAs[List[Any]] # [virtLevel, virtPoints, newXP]
  let stakedWlgold = wlgContract.getInteger(keyWlgStakedAmountByUser(userAddressOpt)).valueOrElse(0)

  let onboard = if (refBy.isDefined()) then ARTONBOARD + (
    if (addr.isDefined() && stakingContract.getString(keyOnboardArtDuckActivatedBy(userAddressOpt)).isDefined()) then ":1" else ":0"
  ) else ""
  
  let acresBalance = if (addr.isDefined()) then assetBalance(addr.value(), acresAssetId) else 0
  let stakedAcres = acresContract.getInteger(keyAcresStakedAmountByUser(userAddressOpt)).valueOrElse(0)

  let delivCount = stakingContract.getInteger(keyUserDeliveryCount(userAddressOpt)).valueOrElse(0)
  let lastDelivDay = stakingContract.getInteger(keyUserLastDeliveryDay(userAddressOpt)).valueOrElse(0)
  [
    "%s%s__customName__" + customName,
    "%s%s__referredBy__" + refBy.valueOrElse(""),
    "%s%s__referrals__" + refs,
    "%s%s__lastTxId__" + lastTxId,
    "%s%d__wavesBalance__" + balance.available.toString(),
    "%s%d__wlgoldBalance__" + wlgoldBalance.toString(),
    "%s%d__usdtBalance__" + usdtBalance.toString(),
    "%s%d__stakedPieces__" + pieces.toString(),
    "%s%d__acresBalance__" + acresBalance.toString(),
    "%s%d__stakedAcres__" + stakedAcres.toString(),
    "%s%d__currentXp__" + xp.toString(),
    "%s%d__currentLvl__" + lvl.toString(),
    "%s%d__pointsToDistribute__" + freePoints.toString(),
    "%s%s__walletArtefacts__" + onboard, # "0" - доступен, но не активирован, "1" - активирован
    "%s%d__stakedWlgold__" + stakedWlgold.toString(),
    "%s%d__virtLevel__" + virtWlgData[0].exactAs[Int].toString(),
    "%s%d__virtPoints__" + virtWlgData[1].exactAs[Int].toString(),
    "%s%d__virtXP__" + virtWlgData[2].exactAs[Int].toString(),
    "%s%d__userDeliveryCount__" + delivCount.toString(),
    "%s%d__userLastDeliveryDay__" + lastDelivDay.toString(),
    "%s%d__lockedAcres__" + acresContract.getInteger(keyAcresLockedAmountByUser(userAddressOpt)).valueOrElse(0).toString(),
    "%s%d__ETALockedAcres__" + acresContract.getInteger(keyAcresLockedEtaByUser(userAddressOpt)).valueOrElse(0).toString()
  ]
}

func applyBonuses(landAssetId: String, pieces: Int) = {
  let infraLevel = stakingContract.getInteger(keyInfraLevelByAssetId(landAssetId)).valueOrElse(0)
  # base * (1 + 0.2*Level + 0.2*(isActive ? artPieces/pieces : 0))
  let artPieces = stakingContract.getInteger(keyLandArtStatusByTypeAndAssetId(ARTPRESALE, landAssetId)).valueOrElse(0)
  let add6 = infraLevel / 6 # 0 for levels 0..5, 1 otherwise
  let add7 = infraLevel / 7 # 0 for levels 0..6, 1 otherwise
  ( infraLevel, 
    artPieces, 
    DAILYRESBYPIECE + fraction(DAILYRESBYPIECE, (infraLevel + add6 + 2*add7), 5) + fraction(DAILYRESBYPIECE, artPieces, pieces * 5)
  )
}

# warehouse volume prefix is landIndex_infaLevel
func getWarehouseTotalVolume(volPrefix: String) = {
  let parts = volPrefix.split("_")
  WHMULTIPLIER * (parts[1].parseIntValue() + 1) * parts[0].parseIntValue()
}

func getWarehouse(whKey: String, landIndex: Int, infraLevel: Int) = {
  let volPrefix = landIndex.toString() + "_" + infraLevel.toString()
  let totS = getWarehouseTotalVolume(volPrefix).toString()
  let whStr = stakingContract.getString(whKey).valueOrElse(volPrefix + ":0_0_0_0_0_0:0_0_0_0_0_0::0_0_" + totS + "_" + totS)
  whStr.split(":")
}

func duckInfoTuple(duckAssetId: String) = {
  let maxHP = maxHealth(stakingContract.getInteger(keyDuckLevel(duckAssetId)).valueOrElse(0))

  (stakingContract.getInteger(keyStakedTimeByAssetId(duckAssetId)).valueOrElse(-1), # stakedTime
    assetInfo(duckAssetId.fromBase58String()).value().name, # name
    stakingContract.getString(keyDuckLocation(duckAssetId)).valueOrElse(""), # location
    stakingContract.getInteger(keyDuckHealth(duckAssetId)).valueOrElse(maxHP), # health
    stakingContract.invoke("getBackpackREADONLY", [duckAssetId], []).asString() # backpack
  )
}

func duckInfoArray(duckAssetId: String, owner: String, duckInf: (Int, String, String, Int, String)) = {
  let customName = stakingContract.getString(keyDuckAssetIdToCustomName(duckAssetId)).valueOrElse(duckInf._2)
  let chars = stakingContract.getString(keyDuckChars(duckAssetId)).valueOrElse("0_0_0_0_0")
  let xp = stakingContract.getInteger(keyDuckXP(duckAssetId)).valueOrElse(0)
  let lvl = stakingContract.getInteger(keyDuckLevel(duckAssetId)).valueOrElse(0)
  let freePoints = stakingContract.getInteger(keyDuckFreePoints(duckAssetId)).valueOrElse(0)
  let equipm = stakingContract.getString(keyDuckEquipment(duckAssetId)).valueOrElse(";_;_;_;_;_;")
  let buffs = stakingContract.getString(keyDuckBuffs(duckAssetId)).valueOrElse("0_0_0_0_0")
  # let (robCost, lastRobTime, duckState, lockedLand, landETA) = getRobberyData(stakingContract, duckAssetId)
  let deliveryCount = stakingContract.getInteger(keyDuckDeliveryCount(duckAssetId)).valueOrElse(0)
  let robberyCount = stakingContract.getInteger(keyDuckRobberyCount(duckAssetId)).valueOrElse(0)
  [
    "%s%s__assetId__" + duckAssetId,
    "%s%s__owner__" + owner,
    "%s%s__customName__" + customName,
    "%s%d__stakedTime__" + duckInf._1.toString(),
    "%s%s__name__" + duckInf._2,
    "%s%s__location__" + duckInf._3,
    "%s%d__health__" + duckInf._4.toString(),
    "%s%d__maxHealth__" + maxHealth(lvl).toString(),
    "%s%s__characteristics__" + chars,
    "%s%d__currentXp__" + xp.toString(),
    "%s%d__currentLvl__" + lvl.toString(),
    "%s%d__pointsToDistribute__" + freePoints.toString(),
    "%s%s__backPack__" + duckInf._5,
    "%s%s__equipment__" + equipm,
    "%s%s__buffs__" + buffs,
    # "%s%d__robberyCost__" + robCost.toString(),
    # "%s%d__robberyTime__" + lastRobTime.toString(),
    # "%s%s__robberyState__" + duckRobStates[duckState],
    # "%s%s__robberyLastLand__" + lockedLand,
    # "%s%d__robberyLastLandReleaseTime__" + landETA.toString(),
    "%s%d__totalRobberyCount__" + robberyCount.toString(),
    "%s%d__totalDeliveryCount__" + deliveryCount.toString()
  ]
}

func landInfoArray(landAssetId: String, owner: String, stakedTime: Int) = {
  if (landAssetId == "") then throw("landAssetId is required") else
  let a = assetInfo(landAssetId.fromBase58String()).value()
  let d = a.description.split("_")
  let landNum = if (a.quantity > 0) then d[recLandNum] else "-" + d[recLandNum] # prefix "-" for burned lands
  let pieces = numPiecesBySize(d[recLandSize])
  let productivity = applyBonuses(landAssetId, pieces) # (infraLevel, artPieces, dailyProductionByPiece)
  let deltaTime = lastBlock.timestamp - stakedTime
  let availRes = if (stakedTime > 0) then fraction(deltaTime, productivity._3 * pieces, DAYMILLIS) else 0
  let needMat = fraction(InfraUpgradeCostS, pieces * (productivity._1 + 1), SSIZE)
  let globalAndLocal = if (stakedTime > 0) then 
    stakingContract.invoke("splitByGlobalAndLocalWeightsREADONLY", [needMat, availRes, d[recTerrains]], []).asSplitResult()
  else
    (stakingContract.invoke("splitByGlobalWeightsREADONLY", [needMat], []).asListIntCompacted(), "")
  let customName = stakingContract.getString(keyLandAssetIdToCustomName(landAssetId)).valueOrElse(d[recContinent] + "-" + d[recLandNum])
  # let fort = stakingContract.getString(keyFortificationsByLand(landAssetId)).valueOrElse(":0_15:0_18:0")
  # let state = stakingContract.getInteger(keyLandRobberyState(landAssetId)).valueOrElse(0)
  # let cooldownETA = stakingContract.getInteger(keyLandCooldownETA(landAssetId)).valueOrElse(0)
  [
    "%s%s__assetId__" + landAssetId,
    "%s%s__owner__" + owner,
    "%s%s__customName__" + customName,
    "%s%d__stakedTime__" + stakedTime.toString(),
    "%s%s__description__" + makeString([landNum, d[recLandSize], d[recTerrains], d[recContinent]], "_"),
    "%s%d__infraLevel__" + productivity._1.toString(),
    "%s%s__availResByType__" + globalAndLocal._2,
    "%s%d__availResTotal__" + availRes.toString(),
    "%s%s__needMaterial__" + globalAndLocal._1,
    "%s%s__landArtefacts__PRESALE:" + productivity._2.toString(),
    "%s%s__warehouse__" + getWarehouse(keyWarehouseByLand(landAssetId), pieces / SSIZE, productivity._1).makeString(":"),
    "%s%s__landOrder__" + economyContract.getString(keyOrderByLand(landAssetId)).valueOrElse("0@0_0@0_0@0_0@0_0@0_0@0:0@0_0@0_0@0_0@0_0@0_0@0:")
    # "%s%s__fortifications__" + fort,
    # "%s%s__robberyState__" + landRobStates[state],
    # "%s%d__canBeRobbedAfter__" + cooldownETA.toString()
  ]
}

func landOrderInfoArray(landAssetId: String, owner: String) = {
  if (landAssetId == "") then throw("landAssetId is required") else
  let a = assetInfo(landAssetId.fromBase58String()).value()
  let d = a.description.split("_")
  let pieces = numPiecesBySize(d[recLandSize])
  let productivity = applyBonuses(landAssetId, pieces) # (infraLevel, artPieces, dailyProductionByPiece)
  [
    "%s%s__assetId__" + landAssetId,
    "%s%s__owner__" + owner,
    "%s%s__warehouse__" + getWarehouse(keyWarehouseByLand(landAssetId), pieces / SSIZE, productivity._1).makeString(":"),
    "%s%s__landOrder__" + economyContract.getString(keyOrderByLand(landAssetId)).valueOrElse("0@0_0@0_0@0_0@0_0@0_0@0:0@0_0@0_0@0_0@0_0@0_0@0:")
  ]
}

func slotEffect(slot: String) = {
  if (slot == "") then 0 else {
    let slot0 = slot.split(",")[0]
    if (slot0 == "") then 0 else {
      let prod = slot0.split(":")
      if (prod[1] == "" || prod[1].parseIntValue() == 0) then 0 else productionMatrix[prod[0].parseIntValue()].split("_")[rIdxEffect].parseIntValue()
    }
  }
}

func tourStatsCommon(tournamentId: Int) = {
  let tData = tournamentContract.getTourData(tournamentId)
  let static = tData[idxStatic]
  let dynamic = tData[idxDynamic]
  let leaders = if (dynamic[tDynamicLeaders] == "") then " " else dynamic[tDynamicLeaders]
  let scoreBoard = tournamentContract.getString(keyScoreBoardByTour(tournamentId)).valueOrElse("")
  let numGrands = if (static.size() > tStaticNumGrands) then static[tStaticNumGrands] else "0"
  let prizeFund = if (static.size() > tStaticPrizeFund) then static[tStaticPrizeFund] else "0"
  let assetId = if (static.size() > tStaticAsset) then static[tStaticAsset].fromBase58String() else wlgAssetId
  let assetName = assetId.assetInfo().valueOrErrorMessage("No assetInfo available").name
  [
    "%s%s__tournamentStaticData__" + makeString([static[tStaticRegisterCost], static[tStaticAttemptCost], static[tStaticStart], static[tStaticEnd], numGrands, prizeFund, assetName], "_"),
    "%s%s__tournamentDynamicData__" + makeString_2C([dynamic[tDynamicStatus], leaders, dynamic[tDynamicWinResult], dynamic[tDynamicTotalRegCount], dynamic[tDynamicTotalAttempts]], "_"),
    "%s%s__tournamentScoreBoard__" + scoreBoard
  ]
}

func getAnyData(addr: Address, key: String) = {
  let bool = addr.getBoolean(key)
  if (bool.isDefined()) then bool.value() else

  let bin = addr.getBinary(key)
  if (bin.isDefined()) then bin.value() else
  
  let int = addr.getInteger(key)
  if (int.isDefined()) then int.value() else
  
  addr.getString(key)
}

# Restrictions:
#  MAX 10 functions
#  function can have any number of any params, and return value of any type
#
# tuple items:
#  (dApp, funcName, args) - for invokes
# or:
#  (address, key) - for data queries
#
# E.g.:
# curl -X 'POST' 'https://nodes-testnet.wavesnodes.com/utils/script/evaluate/3MumkGGztCKAXpWDqxkddofqXSUbqQkvSJy' \
# -H 'accept: application/json' -H 'Content-Type: application/json' \
# -d '{"expr": "genericREADONLY([("3MyN19SDzDpXyEtabWvag2P5mkeFrdFVd4h", "supportedRewardAssets"), ("3Mxd5o7PwH76ZkN8zG4xwDLubEnbkaihKzi", "buyNsbtREADONLY", [1000000000])])
func genericREADONLY(queries: List[(String, String, List[Any]) | (String, String)]) = {
  #                                  addr   fname    args          addr    key
  func call(acc: List[Any], query: (String, String, List[Any]) | (String, String)) = {
    let addr = Address(fromBase58String(query._1))
    let funcOrKey = query._2
    let result = match (query) {
      case inv: (String, String, List[Any]) => addr.invoke(funcOrKey, inv._3, [])
      case _ => addr.getAnyData(funcOrKey)
    }
    acc :+ result
  }

  FOLD<10>(queries, [], call)
}

# pass all contracts list in order of indices, except rest:
# IdxCfgStakingDapp    = 1
# IdxCfgEconomyDapp    = 2
# IdxCfgGovernanceDapp = 3
# IdxCfgWlgDapp        = 4
# IdxCfgPuzzlePoolDapp = 5
# IdxCfgInvestFundDapp = 6
# IdxCfgTournamentDapp = 7
# IdxCfgAcresDapp      = 8
@Callable(i)
func constructorV1(contracts: List[String]) = {
  if (i.caller != this) then throw("permissions denied") else

  func descriptor(acc: String, ignoredItem: String) = {
    acc + "%s"
  }
  let descr = FOLD<10>(contracts, "", descriptor)

  [StringEntry(keyRestCfg(), makeString(cons(descr, contracts), SEP)),
    StringEntry(keyRestAddress(), this.toString())]
}

@Callable(i)
func walletInfoREADONLY(userAddressOpt: String) = {
  ([], walletInternal(userAddressOpt))
}

@Callable(i)
func duckByOwnerInfoREADONLY(userAddress: String) = {
  let stakedDuck = stakingContract.getString(keyStakedDuckByOwner(userAddress))
  ([], if (addressFromString(userAddress).isDefined() && stakedDuck.isDefined()) then {
    let duckAssetId = stakedDuck.value()
    duckInfoArray(duckAssetId, userAddress, duckInfoTuple(duckAssetId))
    } else duckInfoArray("", userAddress, (-1, "", "", -1, ""))
  )
}

@Callable(i)
func duckByAssetIdInfoREADONLY(duckAssetId: String) = {
  let owner = stakingContract.getString(keyDuckIdToOwner(duckAssetId))
  ([], duckInfoArray(duckAssetId, if (owner.isDefined()) then owner.value() else "", duckInfoTuple(duckAssetId)))
}

# up to 100 ducks
@Callable(i)
func ducksByIdsInfoREADONLY(duckAssetIds: List[String]) = {

  func oneDuck(acc: List[List[String]], duckAssetId: String) = {
    if (duckAssetId == "") then throw("duckAssetId is required") else
    let stakedTime = stakingContract.getInteger(keyStakedTimeByAssetId(duckAssetId)).valueOrElse(-1)
    let owner = if (stakedTime > 0) then stakingContract.getString(keyDuckIdToOwner(duckAssetId)).value() else ""
    acc :+ duckInfoArray(duckAssetId, owner, duckInfoTuple(duckAssetId))
  }
  let r = FOLD<100>(duckAssetIds, [], oneDuck)

  ([], r)
}

@Callable(i)
func landByAssetIdInfoREADONLY(landAssetId: String) = {
  if (landAssetId == "") then throw("landAssetId is required") else
  let stakedTime = stakingContract.getInteger(keyStakedTimeByAssetId(landAssetId)).valueOrElse(-1)
  let owner = if (stakedTime > 0) then stakingContract.getString(keyLandAssetIdToOwner(landAssetId)).value() else ""
  ([], landInfoArray(landAssetId, owner, stakedTime))
}

# up to 100 lands
@Callable(i)
func stakedLandsByOwnerInfoREADONLY(landOwnerAddress: String) = {
  if (landOwnerAddress == "") then throw("landOwnerAddress is required") else
  let landsStr = stakingContract.getString(keyStakedLandsByOwner(landOwnerAddress))
  let lands = if (landsStr.isDefined()) then split_51C(landsStr.value(), "_") else []

  func oneLand(acc: List[List[String]], landAssetId: String) = {
    if (landAssetId == "") then throw("landAssetId is required") else
    let stakedTime = stakingContract.getInteger(keyStakedTimeByAssetId(landAssetId)).valueOrElse(-1)
    acc :+ landInfoArray(landAssetId, landOwnerAddress, stakedTime)
  }
  let r = FOLD<100>(lands, [], oneLand)

  ([], r)
}

# up to 100 lands
@Callable(i)
func landsByIdsInfoREADONLY(landAssetIds: List[String]) = {

  func oneLand(acc: List[List[String]], landAssetId: String) = {
    if (landAssetId == "") then throw("landAssetId is required") else
    let stakedTime = stakingContract.getInteger(keyStakedTimeByAssetId(landAssetId)).valueOrElse(-1)
    let owner = if (stakedTime > 0) then stakingContract.getString(keyLandAssetIdToOwner(landAssetId)).value() else ""
    acc :+ landInfoArray(landAssetId, owner, stakedTime)
  }
  let r = FOLD<100>(landAssetIds, [], oneLand)

  ([], r)
}

@Callable(i)
func warehouseOrderByAssetIdInfoREADONLY(landAssetId: String) = {
  if (landAssetId == "") then throw("landAssetId is required") else
  let stakedTime = stakingContract.getInteger(keyStakedTimeByAssetId(landAssetId)).valueOrElse(-1)
  let owner = if (stakedTime > 0) then stakingContract.getString(keyLandAssetIdToOwner(landAssetId)).value() else ""
  ([], landOrderInfoArray(landAssetId, owner))
}

# up to 40 lands
@Callable(i)
func ordersByLandIdsInfoREADONLY(landAssetIds: List[String]) = {

  func oneLand(acc: List[List[String]], landAssetId: String) = {
    if (landAssetId == "") then throw("landAssetId is required") else
    let stakedTime = stakingContract.getInteger(keyStakedTimeByAssetId(landAssetId)).valueOrElse(-1)
    let owner = if (stakedTime > 0) then stakingContract.getString(keyLandAssetIdToOwner(landAssetId)).value() else ""
    acc :+ landOrderInfoArray(landAssetId, owner)
  }
  let r = FOLD<40>(landAssetIds, [], oneLand)

  ([], r)
}

# up to 30 lands
@Callable(i)
func cancelWarehouseOrders(landAssetIds: List[String]) = {
  if (i.caller != this) then throw("permission denied") else
  let blocked = stakingContract.getBoolean(keyBlocked())
  if (!blocked.isDefined() || blocked.value() == false) then throw("Contracts should be blocked before canceling orders") else 

  func oneLand(a: Boolean, landAssetId: String) = {
    if (landAssetId == "") then throw("landAssetId is required") else
    let c = economyContract.invoke("setWarehouseOrder", ["0@0_0@0_0@0_0@0_0@0_0@0:0@0_0@0_0@0_0@0_0@0_0@0:", landAssetId], []).asCancelOrderResult()._1
    (a || c) && !(a && c)
  }
  let r = FOLD<30>(landAssetIds, false, oneLand)
  ([], r)
}

# Pass up to 25 lands to fix warehouse format
# @Callable(i)
# func fixWarehouseFormats(landAssetIds: List[String]) = {
#   if (i.caller != this) then throw("permission denied") else

#   func oneLand(acc: Int, landAssetId: String) = {
#     if (landAssetId == "") then throw("landAssetId is required") else
#     acc + stakingContract.invoke("fixWarehouseFormat", [landAssetId], []).asString().size()
#   }
#   let r = FOLD<25>(landAssetIds, 0, oneLand)
#   ([], r)
# }

# Pass up to 16 user addresses to fix staked pieces
# @Callable(i)
# func fixStakedPieces(users: List[String]) = {
#   if (i.caller != this) then throw("permission denied") else

#   func oneUser(acc: Int, addr: String) = {
#     if (addr == "") then throw("address is required") else
#     acc + stakingContract.invoke("fixStakedPieces", [addr], []).asInt()
#   }
#   let r = FOLD<16>(users, 0, oneUser)
#   ([], r)
# }

# Pass up to 100 lands to fix terrains sizes by continents
# @Callable(i)
# func fixStakedLands(landAssetIds: List[String]) = {
#   let caller = i.caller.toString()
#   if (!adminsList.containsElement(caller)) then throw("Permission denied") else
#   let r = stakingContract.invoke("fixContinentProportions", [landAssetIds], []).asInt()
#   ([], r)
# }

# Pass up to 20 user addresses to distribute acres
@Callable(i)
func distributeLockedAcres(users: List[String], amount: Int, lockDays: Int) = {
  if (i.caller != this && i.callerPublicKey != pub) then throw("Permission denied") else
  if (amount <= 0) then throw("amount should be positive") else
  if (lockDays < 0) then throw("lockDays should be non-negative") else

  func oneUser(acc: Int, addr: String) = {
    if (addr == "") then throw("address is required") else
    acc + acresContract.invoke("sendLockedAcres", [addr, amount, lockDays], []).asInt()
  }
  let totalAcres = FOLD<20>(users, 0, oneUser)
  ([], totalAcres)
}

# callback for staking contract
@Callable(i)
func sendUsdtPrize(userAddress: String) = {
  if (i.caller != stakingContract) then throw("permission denied") else
  let amt = fraction(assetBalance(this, usdtAssetId), USDTPRIZEPART, MULT6)

  ([ScriptTransfer(addressFromStringValue(userAddress), amt, usdtAssetId)], amt)
}

# сколько суммарно требуется игре товаров конкретного вида, 
# сколько уже есть, 
# цена скупки у игроков, 
# цена покупки игроком при вызове неотложки с данным товаром
# %s%s__emergencyServiceData__10_3_300000_600000:10_4_400000_800000:...
@Callable(i)
func getEmergencyServiceDataREADONLY() = {
  let existStr = economyContract.getString(keyEsWarehouse())
  let existAmounts = if (existStr.isDefined()) then existStr.value().split_4C("_") else []

  func singleProd(acc: (List[String], Int), recipeStr: String) = {
    let n = acc._2 # product index < productionMatrix.size()
    let recipe = recipeStr.split("_")
    let maxAmount = if (n == 0) then ESMAXPACKAGES * PRODUCTPKGSIZE else 0 # medkit1 only
    let existAmount = if (size(existAmounts) > n) then existAmounts[n].parseIntValue() else 0
    let totalMat = getRecipeMaterials(recipe) # 8 decimals
    let buyPrice = fraction(totalMat * ESBUYCOEF, RESOURCEPRICEMIN, MULT8 * PRODUCTPKGSIZE) # 8 dec + 6 dec
    let sellPrice = fraction(totalMat * ESSELLCOEF, RESOURCEPRICEMIN, MULT8 * PRODUCTPKGSIZE)

    let y = makeString([maxAmount.toString(), existAmount.toString(), buyPrice.toString(), sellPrice.toString()], "_")
    (acc._1 :+ y, n + 1)
  }
  let s = makeString_2C((FOLD<50>(productionMatrix, ([], 0), singleProd))._1, ":")
  let result = "%s%s__emergencyServiceData__" + s
  ([], result)
}

@Callable(i)
func wlgStatsREADONLY(userAddrOpt: String) = {
  let curStats = getWlgStats(userAddrOpt, [restContract, stakingContract, economyContract, wlgContract, puzzlePoolContract, investFundContract, acresContract], usdtAssetId, 0, MULT6)
  ([], [
    "%s%d__wlgAmount__" + curStats[idxWlgAmount].toString(),
    "%s%d__wlgPrice__" + curStats[idxWlgPrice].toString(),
    "%s%d__usdtFunds__" + curStats[idxWlgFunds].toString(),
    "%s%d__usdtEconomy__" + curStats[idxWlgEconomy].toString(),
    "%s%d__usdtActivity__" + curStats[idxWlgActivity].toString(),
    "%s%d__usdtArbitrage__" + curStats[idxWlgArbitrage].toString(),
    "%s%d__usdtPool__" + curStats[idxWlgPool].toString(),
    "%s%d__wlgIssueTime__" + curStats[idxWlgIssueTime].toString(),
    "%s%d__wlgLastMarketingTeamActTime__" + curStats[idxWlgLastTeamActTime].toString(),
    "%s%d__wlgTeamTotal__" + curStats[idxWlgTeamTotal].toString(),
    "%s%d__wlgTeamAmLeft__" + curStats[idxWlgTeamAmLeft].toString(),
    "%s%d__wlgTeamAmAvailNow__" + curStats[idxWlgTeamAmAvailNow].toString(),
    "%s%d__wlgTeamWlgold__" + curStats[idxWlgTeamWlgold].toString(),
    "%s%d__wlgActTotal__" + curStats[idxWlgActTotal].toString(),
    "%s%d__wlgActAmLeft__" + curStats[idxWlgActAmLeft].toString(),
    "%s%d__wlgActAmAvailNow__" + curStats[idxWlgActAmAvailNow].toString(),
    "%s%d__wlgActWlgold__" + curStats[idxWlgActWlgold].toString(),
    "%s%d__wlgCurPeriod__" + curStats[idxWlgCurPeriod].toString(),
    "%s%d__wlgAmLeftTotal__" + curStats[idxWlgAmLeftTotal].toString(),
    "%s%d__wlgCurPeriodDistribution__" + curStats[idxWlgCurPeriodDistribution].toString(),
    "%s%d__wlgLastUserTime__" + curStats[idxWlgLastUserTime].toString(),
    "%s%d__wlgUserAmAvailNow__" + curStats[idxWlgUserAmAvailNow].toString(),
    "%s%d__wlgGuestSLandDaily__" + curStats[idxWlgSLandDailyAmount].toString(),
    "%s%d__wlgInvestFundTotal__" + curStats[idxWlgInvestFundAmount].toString(),
    "%s%d__wlgUserTotalAvail__" + curStats[idxWlgUserTotalAvail].toString(),
    "%s%d__wlgEffUserTime__" + curStats[idxWlgEffUserTime].toString(),
    "%s%d__wlgBankWlgold__" + curStats[idxWlgBankWlgold].toString()
  ])
}

@Callable(i)
func tournamentStatsREADONLY(tournamentId: Int) = {
  ([], tourStatsCommon(tournamentId))
}

@Callable(i)
func lastTournamentStatsREADONLY() = {
  let tournamentId = tournamentContract.getInteger(lastTourIdKey).valueOrElse(0)
  ([], ("%s%s__lastTournamentId__" + tournamentId.toString()) :: tourStatsCommon(tournamentId))
}

@Callable(i)
func tournamentDuckStatsREADONLY(tId: Int, duckAssetId: String) = {
  let isDuckReg = tournamentContract.getBoolean(keyIsRegisteredByTourAndDuck(tId, duckAssetId)).valueOrElse(false)
  let lastDuckAttempt = tournamentContract.getInteger(keyLastAttemptByTourAndDuck(tId, duckAssetId)).valueOrElse(-1)
  let bestDuckResult = tournamentContract.getInteger(keyBestResultByTourAndDuck(tId, duckAssetId)).valueOrElse(0)
  let bestDuckTx = tournamentContract.getString(keyBestTxByTourAndDuck(tId, duckAssetId)).valueOrElse("")
  let isAwarded = tournamentContract.getBoolean(keyIsAwardedByTourAndDuck(tId, duckAssetId)).valueOrElse(false)
  ([], [
    "%s%s__tournamentDuckStats__" + makeString([isDuckReg.toString(), lastDuckAttempt.toString(), bestDuckResult.toString(), bestDuckTx, isAwarded.toString()], "_")
  ])
}

@Callable(i)
func duckStatsCalculatorREADONLY(duckAssetId: String) = {
  let chars = stakingContract.getString(keyDuckChars(duckAssetId)).valueOrElse("0_0_0_0_0").split("_")
  let buffs = stakingContract.getString(keyDuckBuffs(duckAssetId)).valueOrElse("0_0_0_0_0").split("_")
  # equipment.split("_") => list of 6 segments ['backpack', 'back', 'belt', 'hands', 'head', 'body']
  # segment.split(";") => list of [mainSlots, auxSlots]
  # {mainSlots|auxSlots}.split(",") => [slot0(, slot1)]
  # slot.split(":") => [productIdx, count]
  let equipm = stakingContract.getString(keyDuckEquipment(duckAssetId)).valueOrElse(";_;_;_;_;_;").split("_")
  let equipmentPerc = slotEffect(equipm[segBack].split(";")[1]) # auxSlots: "09:26" or ","
  let equipmentAbsor = slotEffect(equipm[segBelt].split(";")[0]) # mainSlots: "12:27" or ","
  let dodge = dodgeProbability(chars, buffs, equipmentPerc)
  let absorb = damageAbsorption(chars, buffs, equipmentAbsor)
  ([], [
    "%s%d__dodgeProbability__" + dodge.toString(),
    "%s%d__damageAbsorption__" + absorb.toString()
  ])
}

@Callable(i)
func customDuckStatsCalculatorREADONLY(chars: List[String], buffs: List[String], equipmentPerc: Int, equipmentAbsor: Int) = {
  let dodge = dodgeProbability(chars, buffs, equipmentPerc)
  let absorb = damageAbsorption(chars, buffs, equipmentAbsor)
  ([], [
    "%s%d__dodgeProbability__" + dodge.toString(),
    "%s%d__damageAbsorption__" + absorb.toString()
  ])
}

@Callable(i)
func acresStatsREADONLY(userAddrOpt: String) = {
  let userClaim = acresContract.invoke("claimAcresREADONLY", [userAddrOpt], []).asAnyList()
  let userClaimable = userClaim[0].asInt()
  let userLastTime = userClaim[1].asInt()
  ([], [
    "%s%d__acresIssuedTotal__" + acresContract.getInteger(acresIssuedAmountKey).valueOrElse(0).toString(),
    "%s%d__acresUnsold__" + assetBalance(acresContract, acresAssetId).toString(),
    "%s%d__acresStakedTotal__" + acresContract.getInteger(acresStakedTotalKey).valueOrElse(0).toString(),
    "%s%d__acresStakedByUser__" + acresContract.getInteger(keyAcresStakedAmountByUser(userAddrOpt)).valueOrElse(0).toString(),
    "%s%d__acresClaimableByUser__" + userClaimable.toString(),
    "%s%d__acresLastClaimTimeByUser__" + userLastTime.toString(),
    "%s%d__acresLockedByUser__" + acresContract.getInteger(keyAcresLockedAmountByUser(userAddrOpt)).valueOrElse(0).toString(),
    "%s%d__acresLockedEtaByUser__" + acresContract.getInteger(keyAcresLockedEtaByUser(userAddrOpt)).valueOrElse(0).toString()
  ])
}

@Callable(i)
func testV4() = {
  ([], genericREADONLY([]))
}

@Callable(i)
func promo2StatsREADONLY() = {
  let result = acresContract.getString(promo2MapKey).valueOrElse("")
  ([], if (result == "") then [] else result.split_51C("_"))
}

@Callable(i)
func promo2StatsByUserREADONLY(addr: String) = {
  let isAwarded = acresContract.getBoolean(keyIsAwardedByPromoAndUser(2, addr)).valueOrElse(false)
  ([], [
    "%s%s%b__promo2AddressAwarded__" + addr + "__" + isAwarded.toString()
  ])
}
