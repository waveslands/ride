{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT common.ride,landlib.ride,rpglib.ride,wlglib.ride #-}

let zbillAssetIdKey = "zbill_assetId"
let zbillAssetId = this.getBinary(zbillAssetIdKey).valueOrErrorMessage("Not initialized yet")
let zbillIssuedAmountKey = "zbill_issuedAmount"

@Callable(i)
func constructorV1() = {
  if (i.caller != this) then throw("Permission denied") else
  if (getBinary(zbillAssetIdKey).isDefined()) then throw("Already initialized") else
  let issuedAmount = 0
  let issue = Issue("ZBILL", "USDT Bill of Exchange token", issuedAmount, 6, true, unit, 0)
  let assetId = issue.calculateAssetId()
  [
    issue,
    IntegerEntry(zbillIssuedAmountKey, issuedAmount),
    BinaryEntry(zbillAssetIdKey, assetId)
  ]
}

@Callable(i)
func takeUsdt(destAddr: String, amount: Int) = {
  if (i.caller != this) then throw("permission denied") else
  if (i.payments.size() != 0) then throw("No payments allowed") else
  let issuedAmount = getIntegerValue(zbillIssuedAmountKey)
  [ Reissue(zbillAssetId, amount, true),
    IntegerEntry(zbillIssuedAmountKey, issuedAmount + amount),
    ScriptTransfer(destAddr.addressFromStringValue(), amount, usdtAssetId)
  ]
}

@Callable(i)
func returnUsdt() = {
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  let pmt = i.payments[0]
  let amt = pmt.amount
  if (!pmt.assetId.isDefined() || pmt.assetId.value() != usdtAssetId) then throw("USDT payments only!") else
  let issuedAmount = getIntegerValue(zbillIssuedAmountKey)
  if (amt > issuedAmount) then throw("Can't return more USDT (" + amt.fixedPoint(6) + "), than issued ZBILL (" + issuedAmount.fixedPoint(6) + ")") else
  [ Burn(zbillAssetId, amt),
    IntegerEntry(zbillIssuedAmountKey, issuedAmount - amt)
  ]
}

@Callable(i)
func getFundsREADONLY() = {
  if (i.payments.size() != 0) then throw("No payments allowed") else
  let fundSum = assetBalance(this, usdtAssetId) + assetBalance(this, zbillAssetId)
  ([], fundSum)
}