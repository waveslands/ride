{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT common.ride,landlib.ride,rpglib.ride,wlglib.ride #-}

let A6 = 100_000000 # 100.0
let B8 = 5000_0000 # 0.5
let profitAddrKey = "profitAddr"
func keyLastArbTimeByUser(addr: String) = "lastArbTimeUser_" + addr
let stakersAmountPaidTotalKey = "stakersAmountPaidTotal"
func keyStakersAmountPaidUser(addr: String) = "stakersAmountPaidUser_" + addr

func prolog() = {
  if (stakingContract.getBoolean(keyBlocked()).valueOrElse(false)) then throw("Contracts are under maintenance") else
  stakingContract.invoke("saveLastTx", [], []).asInt()
}

func getSwapLimit(addr: String) = {
  let lastTime = getInteger(keyLastArbTimeByUser(addr)).valueOrElse(0)
  let now = lastBlock.timestamp
  if (now - lastTime < arbitrageDelay) then throw("Arbitrages are possible once a " + toString(arbitrageDelay / 60000) + "min") else
  let pieces = getVotingPower(addr)[IdxEffUser]
  # limitInUSD = a * pieces^b
  let pow8 = pow(pieces, 0, B8, 8, 8, CEILING)
  fraction(A6, pow8, MULT8)
}

# 1 mil WLGOLD distribution:
# 10% - DAO investors (instantly) => manual transfer 100000 WLGOLD to DAO wallet
# 10% - market making (instantly) => manual transfer 100000 WLGOLD to market making wallet
# 10% - marketing (during 1 year evenly) => claim to marketing wallet
# 20% - team (during 3 years evenly) => claim to team wallet
# 10% - game activities (during 3 years evenly) => claim to activities wallet
# 40% - staked lands (during 3 years progressively) => claim to caller's wallet according to share
# We assume, that in 3 years totalPieces will grow from current value to at least 100000 and the growth will be linear
# Lets split 3 years by 156 week intervals,
# each of them will have distribution amount proportional to current totalPieces (currentPeriodDistribution)
# amountToClaim = currentPeriodDistribution * piecesShare * temporalShare
# Such a scheme will be used first 1.5 years, and after gathering statistics - refined to final 1.5 years period
func claimInternal(addr: String) = {
  if (!KSALLOWWLGOLD) then ([], 0) else
  let caller = addr.addressFromStringValue()

  let curStats = getWlgStats(addr, [restContract, stakingContract, economyContract, govContract, wlgContract, puzzlePoolContract], usdtAssetId)

  let now = lastBlock.timestamp
  let issueTime = curStats[idxWlgIssueTime]

  let marketingAmountLeft = curStats[idxWlgMarketingAmLeft]
  let marketingAmount = curStats[idxWlgMarketingAmAvailNow]

  let teamAmountLeft = curStats[idxWlgTeamAmLeft]
  let teamAmount = curStats[idxWlgTeamAmAvailNow]

  let actAmountLeft = curStats[idxWlgActAmLeft]
  let actAmount = curStats[idxWlgActAmAvailNow]

  let userTimeKey = keyLastClaimedTimeByUser(addr)
  if (curStats[idxWlgCurPeriod] > MAXPERIOD / 2) then throw("Please modify contract for next 1.5 years, according to stats") else
  let amountLeftTotal = curStats[idxWlgAmLeftTotal]
  let userAmount = curStats[idxWlgUserAmAvailNow]
  let userKey = keyStakersAmountPaidUser(addr)

  ([ScriptTransfer(getString(marketingAddrKey).value().addressFromStringValue(), marketingAmount, wlgAssetId),
    ScriptTransfer(getString(teamAddrKey).value().addressFromStringValue(), teamAmount, wlgAssetId),
    ScriptTransfer(restContract, actAmount, wlgAssetId),
    ScriptTransfer(caller, userAmount, wlgAssetId),
    IntegerEntry(userKey, getInteger(userKey).valueOrElse(0) + userAmount),
    IntegerEntry(stakersAmountPaidTotalKey, getInteger(stakersAmountPaidTotalKey).valueOrElse(0) + userAmount),
    IntegerEntry(stakersAmountLeftKey, amountLeftTotal - userAmount),
    IntegerEntry(marketingAmountLeftKey, marketingAmountLeft - marketingAmount),
    IntegerEntry(lastMarketingTimeKey, now),
    IntegerEntry(teamAmountLeftKey, teamAmountLeft - teamAmount),
    IntegerEntry(lastTeamTimeKey, now),
    IntegerEntry(actAmountLeftKey, actAmountLeft - actAmount),
    IntegerEntry(lastActivitiesTimeKey, now),
    IntegerEntry(userTimeKey, now)
  ], userAmount)
}

# need to place 5k USDT initially
@Callable(i)
func constructorV1(restAddr: String, marketingAddr: String, teamAddr: String, profitAddr: String) = {
  if (i.caller != this) then throw("Permission denied") else
  if (getBinary(wlgAssetIdKey).isDefined()) then throw("Already initialized") else
  let issuedAmount = MILLION6
  let issue = Issue("WLGOLD", "WavesLands Gold investment token", issuedAmount, 8, true, unit, 0)
  let assetId = issue.calculateAssetId()
  [
    issue,
    IntegerEntry(wlgIssueTimeKey, lastBlock.timestamp),
    IntegerEntry(wlgIssuedAmountKey, issuedAmount),
    IntegerEntry(stakersAmountPaidTotalKey, 0),
    IntegerEntry(stakersAmountLeftKey, fraction(MILLION6, PLAYERSHARE, MULT6)), # 1 mil WLGOLD
    BinaryEntry(wlgAssetIdKey, assetId),
    StringEntry(keyRestAddress(), restAddr),
    StringEntry(marketingAddrKey, marketingAddr),
    StringEntry(teamAddrKey, teamAddr),
    StringEntry(profitAddrKey, profitAddr)
  ]
}

# pair is WLGOLD/USDT, so WLGOLD is amount asset, USDT is price asset
# need to reissue some WLGOLD to keep price the same
@Callable(i)
func buyWlg(minAmount: Int) = {
#  if (i.caller != this) then throw("Permission denied") else
  if (!KSALLOWWLGOLD) then ([], 0) else
  let prologResult = prolog()
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  let pmt = i.payments[0]
  let usdtAmt = pmt.amount
  let pmtAssetId = pmt.assetId.valueOrErrorMessage("WAVES can't be used as payment")
  if (pmtAssetId != usdtAssetId) then throw("USDT payments only!") else
  let caller = i.caller
  let addr = caller.toString()
  let maxUsdt = getSwapLimit(addr)
  if (usdtAmt > maxUsdt) then throw("You can spend max " + maxUsdt.fixedPoint(6) + " USDT") else
  if (usdtAmt < MINSHOPPAYMENT) then throw("You can trade min " + MINSHOPPAYMENT.fixedPoint(6) + " USDT") else
  let curStats = getWlgStats("", [restContract, stakingContract, economyContract, govContract, wlgContract, puzzlePoolContract], usdtAssetId)
  let curWlgAmount = curStats[idxWlgAmount]
  let oldFundsUsd = curStats[idxWlgFunds] - usdtAmt
  # we can't use price from stats as payment already added to balance
  let wlgPrice = fraction(oldFundsUsd, MULT8, curWlgAmount)
  let buyPrice = fraction(wlgPrice, 6, 5) # +20%
  let wlgAmount = fraction(usdtAmt, MULT8, buyPrice)
  if (wlgAmount < minAmount) then throw("Price changed during operation, please try again") else
  let profitAmount = usdtAmt / 6
  let deltaFunds = usdtAmt - profitAmount
  let reissued = fraction(curWlgAmount, deltaFunds, oldFundsUsd)
  ([Reissue(wlgAssetId, reissued, true),
    IntegerEntry(wlgIssuedAmountKey, curWlgAmount + reissued),
    IntegerEntry(keyLastArbTimeByUser(addr), lastBlock.timestamp),
    ScriptTransfer(getString(profitAddrKey).value().addressFromStringValue(), profitAmount, usdtAssetId),
    ScriptTransfer(caller, wlgAmount, wlgAssetId)
  ], prologResult)
}

# need to burn some WLGOLD to keep price the same
@Callable(i)
func sellWlg(minAmount: Int) = {
#  if (i.caller != this) then throw("Permission denied") else
  if (!KSALLOWWLGOLD) then ([], 0) else
  let prologResult = prolog()
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  let pmt = i.payments[0]
  let wlgAmt = pmt.amount
  let pmtAssetId = pmt.assetId.valueOrErrorMessage("WAVES can't be used as payment")
  if (pmtAssetId != wlgAssetId) then throw("WLGOLD payments only!") else
  let caller = i.caller
  let addr = caller.toString()
  let maxUsdt = getSwapLimit(addr)
  let curStats = getWlgStats("", [restContract, stakingContract, economyContract, govContract, wlgContract, puzzlePoolContract], usdtAssetId)
  let curWlgAmount = curStats[idxWlgAmount]
  let sellPrice = fraction(curStats[idxWlgPrice], 4, 5) # -20%
  let usdtAmt = fraction(wlgAmt, sellPrice, MULT8)
  if (usdtAmt > maxUsdt) then throw("You can get max " + maxUsdt.fixedPoint(6) + " USDT") else
  if (usdtAmt < MINSHOPPAYMENT) then throw("You can trade min " + MINSHOPPAYMENT.fixedPoint(6) + " USDT") else
  if (usdtAmt < minAmount) then throw("Price changed during operation, please try again") else
  let profitAmount = usdtAmt / 4
  let burned = fraction(usdtAmt + profitAmount, curWlgAmount, curStats[idxWlgFunds])
  ([
    Burn(wlgAssetId, burned),
    IntegerEntry(wlgIssuedAmountKey, curWlgAmount - burned),
    IntegerEntry(keyLastArbTimeByUser(addr), lastBlock.timestamp),
    ScriptTransfer(getString(profitAddrKey).value().addressFromStringValue(), profitAmount, usdtAssetId),
    ScriptTransfer(caller, usdtAmt, usdtAssetId)
  ], prologResult)
}

@Callable(i)
func claim() = {
#  if (i.caller != this) then throw("Permission denied") else
  let prologResult = prolog()
  let actions = claimInternal(i.caller.toString())._1
  (actions, prologResult)
}

# callback for staking contract
@Callable(i)
func onStakeLand(addr: String) = {
  if (i.caller != stakingContract) then throw("Permission denied") else
  claimInternal(addr)
}

# callback for staking contract
# only call for user's last land unstaked
@Callable(i)
func onUnstakeLand(addr: String) = {
  if (i.caller != stakingContract) then throw("Permission denied") else
  claimInternal(addr)
}