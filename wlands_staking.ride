{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let chain = this.bytes.drop(1).take(1).toUtf8String()
let usdnAssetId = match(chain) {
    case "W" => base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
    case "T" => base58'HezsdQuRDtzksAYUy97gfhKy7Z1NW2uXYSHA3bgqenNZ'
    case _ => throw("Unknown chain")
  }
let incubatorAddr = match(chain) {
    case "W" => "3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv".addressFromStringValue()
    case "T" => this
    case _ => throw("Unknown chain")
  }
let breederAddr = match(chain) {
    case "W" => "3PDVuU45H7Eh5dmtNbnRNRStGwULA7NY6Hb".addressFromStringValue()
    case "T" => this
    case _ => throw("Unknown chain")
  }
let economyAddr = match(chain) {
    case "W" => "3P2sk1KncSxRaZs8b4CWGPw2jkvvav74u4D".addressFromStringValue()
    case "T" => "3N8y4wxX3JC4TdrCJBXX16SjWf6X256hrep".addressFromStringValue()
    case _ => throw("Unknown chain")
  }
let pub = base58'6LfPuKJjLgekmncBhMg2LZyMTNVzZBccXR28ySXm9uXD'

let HEALCOST = 10000 # 1.000000 materials for 100 health units
let LANDPREFIX = "LAND"
let DUCKPREFIX = "DUCK"
let DEFAULTLOCATION = "Africa_F_Africa"
let NUMRES = 6
let DAILYRESBYPIECE = 345_6000 # 0.03456000 (base value, not upgraded)
let DAYMILLIS = 86_400_000 # 24*60*60*1000
let FIVEMINUTESMILLIS = 300_000 # 5*60*1000
let RESOURCEPRICEMIN = 158549 # 0.158549 // 0.03456000 * 25 * 0.158549 = 0.136986336 USDN (20% APR)
let InfraUpgradeCostS = match(chain) {
    case "W" => 189_2159_5217 # 189.21595217 * L materials need to upgrade S land from (L-1) to L level
    case "T" => 1_8921_5952 # 1.89215952 materials for testnet
    case _ => throw("Unknown chain")
  }
let InfraUpgradeCostSUsdn = match(chain) {
    case "W" => 120_000_000 # $120 need to upgrade S land from (L-1) to L level
    case "T" => 1_200_000 # $1.2 for testnet
    case _ => throw("Unknown chain")
  }
let EXPMATERIALS = match(chain) {
    case "W" => 1576_7996_0139 # 1576.79960139 materials need to send expedition
    case "T" => 15_7679_9601 # 15.76799601 materials for testnet
    case _ => throw("Unknown chain")
  }
let EXPUSDN = match(chain) {
    case "W" => 1000_000_000 # $1000 to send expedition for money
    case "T" => 10_000_000 # $10 for testnet
    case _ => throw("Unknown chain")
  }
let MULT6 = 1_000_000
let FIVEX = toBigInt(5)
let TWENTYX = toBigInt(20)
let TWENTY2X = toBigInt(20*20)
let TWENTY3X = toBigInt(20*20*20)
let TWENTY4X = toBigInt(20*20*20*20)
let TWENTY5X = toBigInt(20*20*20*20*20)
let matTypes = ["Fuel", "Metal", "Plank", "Glass", "Plastic", "Protein"]
let continents = ["Asia", "Europe", "Americas", "Oceania", "Africa"]

func keyNextFreeLandNum() = "nextLandNum"
func keyLandToAssetId(landNum: String) = "landToAsset_" + landNum
func keyNftName(landNum: String, landSize: String) = LANDPREFIX + landNum + landSize
func keyLandAssetIdToOwner(assetId: String) = "nftOwner_" + assetId
func keyDuckIdToOwner(assetId: String) = "duckOwner_" + assetId
func keyStakedTimeByAssetId(assetId: String) = "stakedTime_" + assetId
func keyInfraLevelByAssetId(assetId: String) = "infraLevel_" + assetId
func keyInfraLevelByAssetIdAndOwner(assetId: String, ownerAddr: String) = "infraLevelByAssetIdAndOwner_" + assetId + "_" + ownerAddr
func keyPresaleArtActivatedByAssetId(assetId: String) = "presaleArtActivated_" + assetId
func keyPresaleArtActivatedByAssetIdAndOwner(assetId: String, ownerAddr: String) = "presaleArtActivatedByAssetIdAndOwner_" + assetId + "_" + ownerAddr
func keyStakedDuckByOwner(ownerAddr: String) = "stakedDuckByOwner_" + ownerAddr
func keyStakedTimeByTypeAssetIdAndOwner(nftType: String, assetId: String, ownerAddr: String) =
    "stakedTimeByTypeAssetIdAndOwner_" + nftType + "_" + assetId + "_" + ownerAddr
func keyLandNumToOwner(landNum: String) = "landOwner_" + landNum
func keyBackpackByDuck(duckAssetId: String) = "backPack_" + duckAssetId
func keyDuckLocation(duckAssetId: String) = "duckLocation_" + duckAssetId
func keyDuckHealth(duckAssetId: String) = "duckHealth_" + duckAssetId
func keyResProportions() = "resTypesProportions"

let recLandNum = 0
let recLandSize = 1
let recTerrains = 2
let recContinent = 3

let locIdxContinent = 0
let locIdxType = 1
let locIdxId = 2

# backpack groups:
let bpIdxLevel = 0 # upgradeLevel
let bpIdxRes = 1 # resList
let bpIdxMat = 2 # matList
let bpIdxProd = 3 # prodList

func asString(v: Any) = {
  match v {
    case s: String => s
    case _ => throw("fail to cast into String")
  }
}

# Given: [r0, r1, r2, r3, r4, r5] = terrain types global counts
# Find normalizing coeff. N, such as: N * (r0 + r1 + r2 + r3 + r4 + r5) = EXPMATERIALS
# return needed materials: [N * r0, N * r1, N * r2, N * r3, N * r4, N * r5]
func getNeededMaterials(total: Int) = {
  let props = getString(keyResProportions()).value().split("_")
  if (props.size() != NUMRES) then throw("Wrong proportions data") else
  let r = [props[0].parseIntValue(), props[1].parseIntValue(), props[2].parseIntValue(),
    props[3].parseIntValue(), props[4].parseIntValue(), props[5].parseIntValue()]
  let sum = r[0] + r[1] + r[2] + r[3] + r[4] + r[5]
  if (sum <= 0) then throw("No lands staked") else
  let norm6 = fraction(total, MULT6, sum)

  func normalizer(acc: List[Int], elem: Int) = {
    acc :+ fraction(elem, norm6, MULT6)
  }
  (FOLD<6>(r, [], normalizer))
}

func subtractMaterials(shouldUseMat: Boolean, has: List[String], totalNeed: Int) = {
  let need = getNeededMaterials(totalNeed)
  func subtractor(acc: List[String], idx: Int) = {
    let result = has[idx].parseIntValue() - need[idx]
    if (result < 0) then throw("Not enough material idx=" + idx.toString() + 
      ", you have " + has[idx] + ", but need " + need[idx].toString()) else
    acc :+ result.toString()
  }
  if (shouldUseMat) then (FOLD<6>([0, 1, 2, 3, 4, 5], [], subtractor)) else has
}

func updateProportions(terrainCounts: List[Int], landSizeIndex: Int, sign: Int) = {
  let props = getString(keyResProportions()).valueOrElse("0_0_0_0_0_0").split("_")
  if (props.size() != NUMRES) then throw("Wrong proportions data") else

  func updater(acc: List[String], i: Int) = {
    let result = props[i].parseIntValue() + sign * terrainCounts[i] * landSizeIndex
    if (result < 0) then throw("Panic! Pieces of type=" + i.toString() + ", sign=" + sign.toString() 
      + ",  terrainCounts[i]=" + terrainCounts[i].toString() + ", landSizeIndex=" + landSizeIndex.toString()) else
    acc :+ result.toString()
  }
  let r = FOLD<6>([0, 1, 2, 3, 4, 5], [], updater)
  r.makeString("_")
}

#                               A   B  C  D  E  F
# BFBBFBDFBBEDDBDFEEBDBDBFF => [0, 10, 0, 6, 3, 6]
func countTerrains(terrains: String) = {
  [terrains.split("A").size() - 1,
    terrains.split("B").size() - 1,
    terrains.split("C").size() - 1,
    terrains.split("D").size() - 1,
    terrains.split("E").size() - 1,
    terrains.split("F").size() - 1]
}

func numPiecesBySize(landSize: String) = {
  match (landSize) {
    case "S" => 25
    case "M" => 100
    case "L" => 225
    case "XL" => 400
    case "XXL" => 625
    case _ => throw("Unknown land size")
  }
}

# decrease one element in aList[idx] by amount, keep other elements
func subOneInList(aList: List[String], idx: Int, amount: Int) = {

  func subber(acc: List[String], i: Int) = {
    acc :+ if (i == idx) then (aList[i].parseIntValue() - amount).toString() else aList[i]
  }
  let r = FOLD<6>([0, 1, 2, 3, 4, 5], [], subber)
  r.makeString("_")
}

func addRes(currentRes: List[String], terrainCounts: List[Int], deltaTime: Int, landSizeIndex: Int, dailyByPieceWithBonuses: Int) = {

  func adder(acc: List[String], i: Int) = {
    let resOfType = fraction(deltaTime, dailyByPieceWithBonuses, DAYMILLIS) * terrainCounts[i] * landSizeIndex
    acc :+ (currentRes[i].parseIntValue() + resOfType).toString()
  }
  let r = FOLD<6>([0, 1, 2, 3, 4, 5], [], adder)
  r.makeString("_")
}

func abs(x: BigInt) = if (x >= toBigInt(0)) then x else -x

let freq = [
  [1, 4, 9, 10, 15],  # Asia     [1, 3, 5, 1, 5, 5]
  [5, 8, 13, 14, 15], # Europe   [5, 3, 5, 1, 1, 5]
  [6, 9, 14, 15, 16], # Americas [6, 3, 5, 1, 1, 4]
  [4, 7, 8, 13, 18],  # Oceania  [4, 3, 1, 5, 5, 2]
  [1, 6, 7, 15, 19]   # Africa   [1, 5, 1, 8, 4, 1]
]

func genChar(n: BigInt, freqs: List[Int]) = {
  let rem = (n % TWENTYX).toInt() # 0..19
  let letter = if (rem < freqs[0]) then "A"
    else if (rem < freqs[1]) then "B"
    else if (rem < freqs[2]) then "C"
    else if (rem < freqs[3]) then "D"
    else if (rem < freqs[4]) then "E"
    else "F"
  
  letter
}

func getBackpack(bpKey: String) = {
  let p = getString(bpKey).valueOrElse("0:0_0_0_0_0_0:0_0_0_0_0_0:").split(":")
  [
    p[bpIdxLevel].parseInt().valueOrElse(0).toString(),
    if (p[bpIdxRes].split("_").size() == NUMRES) then p[bpIdxRes] else "0_0_0_0_0_0",
    if (p[bpIdxMat].split("_").size() == NUMRES) then p[bpIdxMat] else "0_0_0_0_0_0",
    p[bpIdxProd]
  ]
}

func expeditionCommon(shouldUseMat: Boolean, caller: Address, txId: ByteVector, message: ByteVector, sig: ByteVector) = {
  if (!sigVerify_8Kb(message, sig, pub)) then throw("signature does not match") else
  let parts = message.toUtf8String().split(";")
  let hp = parts[0].split("|")[0].split("_")
  let curHP = hp[0].parseIntValue()
  let newHP = hp[1].parseIntValue()
  let locAndTime = parts[1].split(":")
  let targetLocation = locAndTime[0].split("_")
  if (targetLocation[1] != "E") then throw("expedition target location type should be E") else
  let time = locAndTime[1].parseIntValue()
  if ((time > lastBlock.timestamp + FIVEMINUTESMILLIS) ||
    (time < lastBlock.timestamp - FIVEMINUTESMILLIS)) then throw("signature outdated") else
  let userAddr = caller.toString()
  let duckAssetId = getString(keyStakedDuckByOwner(userAddr)).valueOrErrorMessage("You don't have a duck staked")
  let keyHealth = keyDuckHealth(duckAssetId)
  let oldFromState = getInteger(keyHealth).valueOrElse(100)
  if (oldFromState != curHP) then throw("oldHealth=" + getInteger(keyHealth).valueOrElse(100).toString() + " from state does not match one from flight log=" + curHP.toString()) else
  if (curHP <= 0) then throw("You can't fly with zero health") else
  if (newHP <= 0) then ((if (!shouldUseMat) then [ScriptTransfer(caller, EXPUSDN, usdnAssetId)] else []) :+ IntegerEntry(keyHealth, 0), "") else

  let bpKey = keyBackpackByDuck(duckAssetId)
  let currentPack = getBackpack(bpKey)
  let mList = currentPack[bpIdxMat].split("_")
  let newMat = makeString(subtractMaterials(shouldUseMat, mList, EXPMATERIALS), "_")
  let bigNum = txId.toBigInt().abs()
  let freeNum = getInteger(keyNextFreeLandNum()).valueOrElse(501)
  let landNum = freeNum.toString()
  let continentIdx = toInt(bigNum % FIVEX)
  let f = freq[continentIdx]

  func terrainGenerator(acc: (String, BigInt), elem: Int) = {
    (acc._1 + 
      genChar(acc._2, f) + genChar(acc._2 / TWENTYX, f) + genChar(acc._2 / TWENTY2X, f) + genChar(acc._2 / TWENTY3X, f) + genChar(acc._2 / TWENTY4X, f), 
    acc._2 / TWENTY5X)
  }

  let t = FOLD<5>([1, 2, 3, 4, 5], ("", bigNum / FIVEX), terrainGenerator)
  # name: LAND13S, description: "13_S_CEBBEFECCCFEEADECBDECEDBC_Asia"
  let continent = continents[continentIdx]
  let issue = Issue(keyNftName(landNum, "S"), makeString([landNum, "S", t._1, continent], "_"), 1, 0, false)
  let assetId = calculateAssetId(issue)
  let id = assetId.toBase58String()
  ([
    IntegerEntry(keyNextFreeLandNum(), freeNum + 1), 
    issue,
    StringEntry(keyLandToAssetId(landNum), id),
    StringEntry(keyLandAssetIdToOwner(id), userAddr),
    StringEntry(keyLandNumToOwner(landNum), userAddr),
    IntegerEntry(keyInfraLevelByAssetId(id), 0),
    IntegerEntry(keyInfraLevelByAssetIdAndOwner(id, userAddr), 0),
    ScriptTransfer(caller, 1, assetId),
    StringEntry(keyDuckLocation(duckAssetId), makeString([continent, "L", id], "_")),
    IntegerEntry(keyHealth, newHP),
    StringEntry(bpKey, makeString([currentPack[bpIdxLevel], currentPack[bpIdxRes], newMat, currentPack[bpIdxProd]], ":"))
  ], id)
}

func applyBonuses(landAssetId: String) = {
  let infraLevel = getInteger(keyInfraLevelByAssetId(landAssetId)).valueOrElse(0)
  # base * (1 + 0.25*Level + 0.15*(isActive ? 1 : 0))
  let presaleBonus = if (getBoolean(keyPresaleArtActivatedByAssetId(landAssetId)).valueOrElse(false)) then 3 else 0
  DAILYRESBYPIECE + fraction(DAILYRESBYPIECE, infraLevel, 4) + fraction(DAILYRESBYPIECE, presaleBonus, 20)
}

func checkClaimConditions(addr: String) = {
  let duckAssetId = getString(keyStakedDuckByOwner(addr)).valueOrErrorMessage("You don't have a duck staked")
  let curLocation = getString(keyDuckLocation(duckAssetId)).valueOrElse(DEFAULTLOCATION)
  let loc = curLocation.value().split("_")
  if (loc[locIdxType] != "L") then throw("Duck location type is " + loc[locIdxType] + ", but should be L") else
  let landAssetId = loc[locIdxId]
  let asset = assetInfo(landAssetId.fromBase58String()).value()
  let timeKey = keyStakedTimeByAssetId(landAssetId)
  let savedTime = getInteger(timeKey).valueOrErrorMessage("NFT " + asset.name + " is not staked")
  let owner = getString(keyLandAssetIdToOwner(landAssetId)).valueOrErrorMessage("NFT " + asset.name + " is orphaned")
  if (owner != addr) then throw(LANDPREFIX + " is not yours") else
  let d = asset.description.split("_") # ["445", "S", "BFBBFBDFBBEDDBDFEEBDBDBFF", "Africa"]
  (duckAssetId, landAssetId, d, savedTime)
}

func claimResInternal(addr: String, amount: Int) = {
  let c = checkClaimConditions(addr)
  let landSize = c._3[recLandSize]
  let terrainCounts = countTerrains(c._3[recTerrains]) # [0, 10, 0, 6, 3, 6]
  let deltaTime = lastBlock.timestamp - c._4
  if (deltaTime < 0) then throw("Saved timestamp is in future, saved = " + c._4.toString() + ", current = " + lastBlock.timestamp.toString()) else
  let pieces = numPiecesBySize(landSize)
  let dailyProductionByPiece = applyBonuses(c._2)
  let availRes = fraction(deltaTime, dailyProductionByPiece * pieces, DAYMILLIS)
  if (availRes < amount) then throw("Not enough resources, available = " + availRes.toString() + ", requested = " + amount.toString()) else
  let newDeltaTime = fraction(availRes - amount, DAYMILLIS, dailyProductionByPiece * pieces)
  let newTimestamp = lastBlock.timestamp - newDeltaTime
  let bpKey = keyBackpackByDuck(c._1)
  let currentPack = getBackpack(bpKey)
  let currentRes = currentPack[bpIdxRes].split("_") # resources already in backpack
  let bpRes = addRes(currentRes, terrainCounts, deltaTime - newDeltaTime, pieces / 25, dailyProductionByPiece) # new res amounts by type: ${Oil}_${Ore}_${Wood}_${Sand}_${Clay}_${Organic}

  ([IntegerEntry(keyStakedTimeByAssetId(c._2), newTimestamp),
    IntegerEntry(keyStakedTimeByTypeAssetIdAndOwner(LANDPREFIX, c._2, addr), newTimestamp)], 
    bpKey, # StringEntry(bpKey, newPack) - should be saved by calling code
    [currentPack[bpIdxLevel], bpRes, currentPack[bpIdxMat], currentPack[bpIdxProd]]
  ) # (timeActions, bpKey, backpackList)
}

func claimAll(addr: String, landAssetId: String, pieces: Int) = {
  let timeKey = keyStakedTimeByAssetId(landAssetId)
  let savedTime = getInteger(timeKey).value()
  let availRes = fraction(lastBlock.timestamp - savedTime, applyBonuses(landAssetId), DAYMILLIS) * pieces
  claimResInternal(addr, availRes) # (timeActions, bpKey, backpackList)
}

func upInfraCommon(shouldUseMat: Boolean, caller: Address, paymentAmount: Int) = {
#  if (caller != this) then throw("temporary disabled") else
  let addr = caller.toString()
  let c = checkClaimConditions(addr)
  let pieces = numPiecesBySize(c._3[recLandSize])
  let infraKey = keyInfraLevelByAssetId(c._2)
  let curLevel = getInteger(infraKey).valueOrElse(0)
  if (curLevel >= 3) then throw("Currently max infrastructure level = 3") else
  let newLevel = curLevel + 1
  let cost = fraction(InfraUpgradeCostSUsdn, pieces * newLevel, 25)
  if (!shouldUseMat && paymentAmount != cost) then throw("Payment attached should be " + cost.toString()) else
  let bpKey = keyBackpackByDuck(c._1)
  let currentPack = getBackpack(bpKey)
  let mList = currentPack[bpIdxMat].split("_")
  let newMat = makeString(subtractMaterials(shouldUseMat, mList, fraction(InfraUpgradeCostS, pieces * newLevel, 25)), "_")
  let claimResult = claimAll(addr, c._2, pieces) # (timeActions, bpKey, backpackList)
  ([IntegerEntry(infraKey, newLevel),
    IntegerEntry(keyInfraLevelByAssetIdAndOwner(c._2, addr), newLevel),
    StringEntry(bpKey, makeString([currentPack[bpIdxLevel], claimResult._3[bpIdxRes], newMat, currentPack[bpIdxProd]], ":"))]
    ++ claimResult._1, # timeActions from claimAll
    newLevel)
}

func activatePresaleArt(addr: String) = {
  let c = checkClaimConditions(addr)
  let activationKey = keyPresaleArtActivatedByAssetId(c._2)
  if (getBoolean(activationKey).valueOrElse(false)) then throw("Presale artifact is already activated") else
  if (c._3[recLandNum].parseIntValue() > 500) then throw(LANDPREFIX + " " + c._2 + " is not eligible for presale artifact") else
  let pieces = numPiecesBySize(c._3[recLandSize])
  let claimResult = claimAll(addr, c._2, pieces)
  
  claimResult._1 # timeActions from claimAll
  :+ BooleanEntry(keyPresaleArtActivatedByAssetId(c._2), true)
  :+ BooleanEntry(keyPresaleArtActivatedByAssetIdAndOwner(c._2, addr), true)
  :+ StringEntry(claimResult._2, makeString(claimResult._3, ":")) # bpKey, backpackList
}

@Callable(i)
func stakeLand() = {
  let pmt = i.payments[0].value()
  let assetId = pmt.assetId.value()
  let address = i.caller.toString()
  if (pmt.amount != 1) then throw("NFT " + LANDPREFIX + " token should be attached as payment") else
  let asset = assetInfo(assetId).value()
  if (asset.issuer != this) then throw("Unknown issuer of token") else
  if (!asset.name.contains(LANDPREFIX)) then throw("Only NFT " + LANDPREFIX + " tokens are accepted") else
  let landNumSize = asset.name.drop(4)
  let landNum = if (landNumSize.contains("XXL")) then landNumSize.dropRight(3)
    else if (landNumSize.contains("XL")) then landNumSize.dropRight(2)
    else landNumSize.dropRight(1) # S, M, L
  let landNumInt = landNum.parseInt().valueOrErrorMessage("Cannot parse land number from " + asset.name)
  let landAssetId = assetId.toBase58String()
  let timeKey = keyStakedTimeByAssetId(landAssetId)
  if (isDefined(getInteger(timeKey))) then throw("NFT " + asset.name + " is already staked") else
  let d = asset.description.split("_") # ["445", "S", "BFBBFBDFBBEDDBDFEEBDBDBFF", "Africa"]
  let terrainCounts = countTerrains(d[recTerrains]) # [0, 10, 0, 6, 3, 6]
  let props = updateProportions(terrainCounts, numPiecesBySize(d[recLandSize]) / 25, 1)

  [IntegerEntry(timeKey, lastBlock.timestamp),
    IntegerEntry(keyStakedTimeByTypeAssetIdAndOwner(LANDPREFIX, landAssetId, address), lastBlock.timestamp),
    StringEntry(keyLandAssetIdToOwner(landAssetId), address),
    StringEntry(keyLandNumToOwner(landNum), address),
    StringEntry(keyResProportions(), props)]
}

# what to do with res when land is unstaked?
@Callable(i)
func unstakeLand(landAssetIdStr: String) = {
  if (i.payments.size() != 0) then throw("unstake doesn't require any payments") else
  let addr = i.caller.toString()
  let c = checkClaimConditions(addr)
  let terrainCounts = countTerrains(c._3[recTerrains]) # [0, 10, 0, 6, 3, 6]
  let pieces = numPiecesBySize(c._3[recLandSize])
  let props = updateProportions(terrainCounts, pieces / 25, -1)
  let claimResult = claimAll(addr, c._2, pieces) # (actions: [keyStakedTimeByAssetId, keyStakedTimeByTypeAssetIdAndOwner], bpKey, backpackList)

  [ScriptTransfer(i.caller, 1, c._2.fromBase58String()),
    DeleteEntry(keyStakedTimeByAssetId(c._2)),
    DeleteEntry(keyStakedTimeByTypeAssetIdAndOwner(LANDPREFIX, c._2, addr)),
    StringEntry(keyResProportions(), props),
    StringEntry(claimResult._2, makeString(claimResult._3, ":"))]
}

@Callable(i)
func stakeDuck() = {
  let pmt = i.payments[0].value()
  let assetId = pmt.assetId.value()
  let address = i.caller.toString()
  if (pmt.amount != 1) then throw("NFT " + DUCKPREFIX + " token should be attached as payment") else
  let asset = assetInfo(assetId).value()
  if (asset.issuer != incubatorAddr && asset.issuer != breederAddr) then throw("Unknown issuer of " + DUCKPREFIX + " token") else
  if (!asset.name.contains(DUCKPREFIX)) then throw("Only NFT " + DUCKPREFIX + " tokens are accepted") else
  let assetIdStr = assetId.toBase58String()
  let timeKey = keyStakedTimeByAssetId(assetIdStr)
  if (isDefined(getInteger(timeKey))) then throw("NFT " + asset.name + " is already staked") else
  if (isDefined(getString(keyStakedDuckByOwner(address)))) then throw("You already staked one duck: " + asset.name) else
  let locKey = keyDuckLocation(assetIdStr)
  let location = getString(locKey)
  let keyHealth = keyDuckHealth(assetIdStr)
  let health = getInteger(keyHealth)
  let bpKey = keyBackpackByDuck(assetIdStr)
  let backpack = getString(bpKey)

  [IntegerEntry(timeKey, lastBlock.timestamp),
    IntegerEntry(keyStakedTimeByTypeAssetIdAndOwner(DUCKPREFIX, assetId.toBase58String(), address), lastBlock.timestamp),
    StringEntry(keyDuckIdToOwner(assetIdStr), address),
    StringEntry(keyStakedDuckByOwner(address), assetIdStr)]
    ++ if (location.isDefined()) then [] else [StringEntry(locKey, DEFAULTLOCATION)]
    ++ if (health.isDefined()) then [] else [IntegerEntry(keyHealth, 100)]
    ++ if (backpack.isDefined()) then [] else [StringEntry(bpKey, "0:0_0_0_0_0_0:0_0_0_0_0_0:")]
}

@Callable(i)
func unstakeDuck(assetIdStr: String) = {
  if (i.payments.size() != 0) then throw("unstake doesn't require any payments") else
  let assetId = assetIdStr.fromBase58String()
  let address = i.caller.toString()
  let asset = assetInfo(assetId).value()
  if (asset.issuer != incubatorAddr && asset.issuer != breederAddr) then throw("Unknown issuer of " + DUCKPREFIX + " token") else
  if (!asset.name.contains(DUCKPREFIX)) then throw("Only NFT " + DUCKPREFIX + " tokens can be unstaked") else
  let timeKey = keyStakedTimeByAssetId(assetId.toBase58String())
  if (!isDefined(timeKey)) then throw("NFT " + asset.name + " is not staked") else
  if (!isDefined(keyStakedDuckByOwner(address))) then throw("The duck " + asset.name + " is not staked") else
  let owner = getString(keyDuckIdToOwner(assetId.toBase58String())).valueOrErrorMessage("NFT " + asset.name + " is orphaned")
  if (owner != address) then throw("Staked NFT is not yours") else

  [ScriptTransfer(i.caller, 1, assetId),
    DeleteEntry(timeKey),
    DeleteEntry(keyDuckLocation(assetIdStr)),
    DeleteEntry(keyDuckIdToOwner(assetIdStr)),
    DeleteEntry(keyStakedTimeByTypeAssetIdAndOwner(DUCKPREFIX, assetIdStr, address)),
    DeleteEntry(keyStakedDuckByOwner(address))]
}

# calc res produced by staked land in a time interval since last update
# move choosen amount of res to duck's backpack
# backPack data: ${backPackUpgradeLevel}:${Oil}_${Ore}_${Wood}_${Sand}_${Clay}_${Organic}:{materials}:{products}
@Callable(i)
func claimRes(amount: Int, landAssetIdStr: String) = {
#  if (i.caller != this) then throw("temporary disabled") else
  if (i.payments.size() != 0) then throw("claimRes doesn't require any payments") else
  let addr = i.originCaller.toString()
  let result = claimResInternal(addr, amount) # (actions, bpKey, backpackList)
  (result._1 :+ StringEntry(result._2, makeString(result._3, ":")),
    result._3[bpIdxRes])
}

# в любом случае каждый перелет это транза
# можно закладывать страховку перелета
# типа ставишь галку "согласен полечиться за 0.1 бакса, если помру"
# или материалы
# тогда если он пожадничал и погиб, то сам виноват что не застраховался и плати теперь в разы больше =)
# а какие расходы у нас на перечисление ресурсов будут при страховке?
# никаких, надо в транзе payment делать в случае usdn
# Значит нужно проверять есть ли у него материалы и баксы, если нажал чекбокс страховки, 
# то при подписании транзакции у него с рюкзака спишуться на нас страховка. Норм, тема.
# я думаю, чекбокс должен быть по умолчанию нажатым, при отжимании какой-нибудь попап с предупреждением, 
# что без страховки будет дороже

# а выбор какой материал будет списан?
# ui должен предоставлять возможность выбора
# радио на 7 положений
# выпадающий список лучше, а по умолчанию, первый доступный
# сверху всегда баксы причем
# материалы лучше, нам нужно от них избавляться
# сейчас нужно именно на них строить весь спрос в игре
# ок, тогда я помимо heal() изменю и flight()
# insuranceType: 0..5 => material, -1 => USDN, -2 => none
#@Callable(i)
#func flightInsured(insuranceType: Int, message: ByteVector, sig: ByteVector) = {
# if (!sigVerify_8Kb(message, sig, pub)) then throw("signature does not match") else
# if (i.payments.size() != 0) then throw("flight doesn't require any payments") else
# let parts = message.toUtf8String().split(";")
# let hp = parts[0].split("|")[0].split("_")
# let curHP = hp[0].parseIntValue()
# let newHP = hp[1].parseIntValue()
# let newLocAndTime = parts[1].split(":")
# let newLocation = newLocAndTime[0]
# let time = newLocAndTime[1].parseIntValue()
# if ((time > lastBlock.timestamp + FIVEMINUTESMILLIS) ||
#   (time < lastBlock.timestamp - FIVEMINUTESMILLIS)) then throw("signature outdated") else
# let duckAssetId = getString(keyStakedDuckByOwner(i.caller.toString())).valueOrErrorMessage("You don't have a duck staked")
# let keyHealth = keyDuckHealth(duckAssetId)
# let oldFromState = getInteger(keyHealth).valueOrElse(100)
# if (oldFromState != curHP) then throw("oldHealth=" + getInteger(keyHealth).valueOrElse(100).toString() + " from state does not match one from flight log=" + curHP.toString()) else
# if (curHP <= 0) then throw("You can't fly with zero health") else
# let locKey = keyDuckLocation(duckAssetId)
# let curLocation = getString(locKey).valueOrElse(DEFAULTLOCATION)
# if (newLocation == curLocation) then throw("You can't fly to the same location") else
# # todo: if health < 100, we should decrease backpack capacity proportionally
# ([StringEntry(locKey, if (newHP > 0) then newLocation else curLocation),
#   IntegerEntry(keyHealth, newHP)], unit)
#}

# Health|Mission|  Obstcales   |         Winds           |  Path  |  Timestamp  ;              newLocation                 : timestamp
#  80_50|0,4_4,0|B3,3_B4,3_T2,1|WWSSESEWEEWNNESEEWSSEESNS|NNEEEENN|1670074470199;${continent}_${locationType}_${locationId}:1670074470199
@Callable(i)
func flight(message: ByteVector, sig: ByteVector) = {
  if (!sigVerify_8Kb(message, sig, pub)) then throw("signature does not match") else
  if (i.payments.size() != 0) then throw("flight doesn't require any payments") else
  let parts = message.toUtf8String().split(";")
  let hp = parts[0].split("|")[0].split("_")
  let curHP = hp[0].parseIntValue()
  let newHP = hp[1].parseIntValue()
  let newLocAndTime = parts[1].split(":")
  let newLocation = newLocAndTime[0]
  let time = newLocAndTime[1].parseIntValue()
  if ((time > lastBlock.timestamp + FIVEMINUTESMILLIS) ||
    (time < lastBlock.timestamp - FIVEMINUTESMILLIS)) then throw("signature outdated") else
  let duckAssetId = getString(keyStakedDuckByOwner(i.caller.toString())).valueOrErrorMessage("You don't have a duck staked")
  let keyHealth = keyDuckHealth(duckAssetId)
  let oldFromState = getInteger(keyHealth).valueOrElse(100)
  if (oldFromState != curHP) then throw("oldHealth=" + getInteger(keyHealth).valueOrElse(100).toString() + " from state does not match one from flight log=" + curHP.toString()) else
  if (curHP <= 0) then throw("You can't fly with zero health") else
  let locKey = keyDuckLocation(duckAssetId)
  let curLocation = getString(locKey).valueOrElse(DEFAULTLOCATION)
  if (newLocation == curLocation) then throw("You can't fly to the same location") else
  # todo: if health < 100, we should decrease backpack capacity proportionally
  ([StringEntry(locKey, if (newHP > 0) then newLocation else curLocation),
    IntegerEntry(keyHealth, newHP)], unit)
}

# temporary duck healing while we don't have artifacts
@Callable(i)
func setHealth(health: Int, duckAssetId: String) = {
#  if (i.caller != this) then throw("permission denied") else
  if (health < 0 || health > 100) then throw("HP should be within 0..100") else

  [IntegerEntry(keyDuckHealth(duckAssetId), health)]
}

# matType: index of material from backpack to spend on healing ${Fuel}_${Metal}_${Plank}_${Glass}_${Plastic}_${Protein}
# 1_000_000 of materials heal from 0 to 100%
@Callable(i)
func heal(matType: Int, amount: Int) = {
  if (matType < 0 || matType >= NUMRES) then throw("Unknown material: " + matType.toString()) else
  if (amount <= 0) then throw("Amount should be positive! " + amount.toString()) else
  let duckAssetId = getString(keyStakedDuckByOwner(i.caller.toString())).valueOrErrorMessage("You don't have a duck staked")
  let keyHealth = keyDuckHealth(duckAssetId)
  let oldHealth = getInteger(keyHealth).valueOrElse(100)
  if (oldHealth >= 100) then throw("HP should be < 100 to heal") else
  let bpKey = keyBackpackByDuck(duckAssetId)
  let currentPack = getBackpack(bpKey)
  let mList = currentPack[bpIdxMat].split("_")
  let currentAmount = mList[matType].parseIntValue()
  let deltaHealth = min([amount / HEALCOST, 100 - oldHealth])
  let spendAmount = deltaHealth * HEALCOST
  if (currentAmount < spendAmount) then throw("You need " + spendAmount.toString() + " of " + matTypes[matType] + 
    " to heal, but you backpack contains " + currentAmount.toString()) else
  let newMat = subOneInList(mList, matType, spendAmount)

  [IntegerEntry(keyHealth, oldHealth + deltaHealth),
    StringEntry(bpKey, makeString([currentPack[bpIdxLevel], currentPack[bpIdxRes], newMat, currentPack[bpIdxProd]], ":"))]
}

# callback for economy contract
@Callable(i)
func updateBackpack(duckAssetId: String, newPack: String) = {
  if (i.caller != economyAddr) then throw("permission denied") else

  ([StringEntry(keyBackpackByDuck(duckAssetId), newPack)], newPack)
}

# Health|Mission|  Obstcales   |         Winds           |  Path  |  Timestamp  ;newLocation: timestamp
#  80_50|0,4_4,0|B3,3_B4,3_T2,1|WWSSESEWEEWNNESEEWSSEESNS|NNEEEENN|1670074470199;?_E_?:1670074470199
@Callable(i)
func expeditionBuy(message: ByteVector, sig: ByteVector) = {
  if (i.payments.size() != 1) then throw("Exactly one payment required") else
  let pmt = i.payments[0].value()
  if (pmt.assetId != usdnAssetId) then throw("Allowed USDN payment only!") else
  if (pmt.amount != EXPUSDN) then throw("Payment attached should be " + EXPUSDN.toString()) else
  let result = expeditionCommon(false, i.caller, i.transactionId, message, sig)
  (result._1 :+ ScriptTransfer(economyAddr, pmt.amount, usdnAssetId), result._2)
}

# Health|Mission|  Obstcales   |         Winds           |  Path  |  Timestamp  ;newLocation: timestamp
#  80_50|0,4_4,0|B3,3_B4,3_T2,1|WWSSESEWEEWNNESEEWSSEESNS|NNEEEENN|1670074470199;?_E_?:1670074470199
@Callable(i)
func expedition(message: ByteVector, sig: ByteVector) = {
  if (i.payments.size() != 0) then throw("expedition doesn't require any payments") else
  expeditionCommon(true, i.caller, i.transactionId, message, sig)
}

@Callable(i)
func upgradeInfra(landAssetIdIgnored: String) = {
  if (i.payments.size() != 0) then throw("Infrastructure upgrade doesn't require any payments") else
  upInfraCommon(true, i.caller, 0)
}

@Callable(i)
func upgradeInfraUsdn(landAssetIdIgnored: String) = {
  if (i.payments.size() != 1) then throw("Exactly one payment required") else
  let pmt = i.payments[0].value()
  if (pmt.assetId != usdnAssetId) then throw("Allowed USDN payment only!") else
  let result = upInfraCommon(false, i.caller, pmt.amount)
  (result._1 :+ ScriptTransfer(economyAddr, pmt.amount, usdnAssetId), result._2)
}

@Callable(i)
func activateArtifact(artName: String) = {
  if (i.payments.size() != 0) then throw("Artifact activation doesn't require any payments") else
  let result = match(artName) {
    case "PRESALE" => activatePresaleArt(i.caller.toString())
    case _ => throw("Unknown artifact")
  }
  result
}
