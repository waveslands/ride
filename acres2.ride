{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT common2.ride,wlglib2.ride #-}

func prolog(i: Invocation) = {
  if (i.originCaller != rest2Contract && getBoolean(keyBlocked()).valueOrElse(false)) then throw("Contracts are under maintenance") else
  [StringEntry(keyLastTxIdByUser(i.originCaller.toString()), i.transactionId.toBase58String())]
}

# pass negative amount to unstake
func stakeUnstakeAcresInternal(amt: Int, address: String) = {
  strict wlgResult = wlgContract.invoke("onStakeUnstakeLand", [address], [])
  let now = lastBlock.timestamp
  let timeKey = keyAcresStakedTimeByUser(address)
  let amountKey = keyAcresStakedAmtByUser(address)
  let oldAcresAmount = getInteger(amountKey).valueOrElse(0)
  if (amt < 0 && (oldAcresAmount + amt) < 0) then throw("You have only " + oldAcresAmount.fixedPoint(8) + " ACRES staked, tried to unstake " + fixedPoint(-amt, 8)) else
  let newAcresAmount = oldAcresAmount + amt
  let oldTotal = getInteger(acresStakdTotalKey).valueOrElse(0)
  let userFpKey = keyFarmingPowerByUser(address)
  let oldFp = getInteger(userFpKey).valueOrElse(0)
  let newFp = getFarmingPowerByAcres(newAcresAmount)
  let oldTotalFp = getInteger(totalFarmingPowerKey).valueOrElse(0)

  ([IntegerEntry(timeKey, lastBlock.timestamp),
    IntegerEntry(amountKey, newAcresAmount),
    IntegerEntry(acresStakdTotalKey, oldTotal + amt),
    IntegerEntry(userFpKey, newFp),
    IntegerEntry(totalFarmingPowerKey, oldTotalFp - oldFp + newFp)
    ], wlgResult)
    # (actions, wlgClaimedAmount)
}

# usdtBalanceCorrection needed if USDT payment was attached to call, because RIDE v5+ counts payment amount as already added to balance
func getWlgPrice(usdtBalanceCorrection: Int) = {
  let issuedAmount = wlgContract.getInteger(wlgIssuedAmtKey).valueOrErrorMessage("WLGOLD is not issued yet")
  let wlgUsd = assetBalance(wlgContract, usdtAssetId)
  let acres2Usd = assetBalance(acres2Contract, usdtAssetId) - usdtBalanceCorrection
  let investFundTotal = assetBalance(investFundContract, usdtAssetId) + investFundContract.getInteger(zbIssuedAmtKey).valueOrElse(0)
  let totalFundsUsd = acres2Usd + wlgUsd + investFundTotal
  fraction(totalFundsUsd, MULT8, issuedAmount)
}

let keyLastAcresSellTime = "lastAcresSellTime"
let keyLastLimitLeft = "lastLimitLeft" # in USDT
let keyLastSavedTVL = "lastSavedTVL" # in USDT


# Total daily limit is 1% of TVL
# Sell is done, limit decreased, cooldown starts linearly: limitLeft(t) = limitLeft(lastT) + k * (t-lastT)
# Assume user has used whole 1% of TVL at moment lastT
# k = 0.01 * lastSavedTVL / DAY_MILLIS
# limitLeft(t) = limitLeft(lastT) + 0.01 * lastSavedTVL * (t-lastT) / DAY_MILLIS
func getSwapLimitAcres() = {
  let wlgUsd = wlgContract.assetBalance(usdtAssetId)
  let acres2Usd = this.assetBalance(usdtAssetId)
  let investFundTotal = investFundContract.assetBalance(usdtAssetId) + investFundContract.getInteger(zbIssuedAmtKey).valueOrElse(0)
  let newTVL = acres2Usd + wlgUsd + investFundTotal
  let defaultLimit = newTVL / ONE_PERCENT_DIVISOR
  let lastLimitLeft = getInteger(keyLastLimitLeft).valueOrElse(defaultLimit)
  let lastTVL = getInteger(keyLastSavedTVL).valueOrElse(newTVL)
  let lastTime = getInteger(keyLastAcresSellTime).valueOrElse(0)
  let now = lastBlock.timestamp
  let currentLimit = lastLimitLeft + fraction(lastTVL, lastTime - now, DAY_MILLIS * ONE_PERCENT_DIVISOR)
  let limitLeftUsdt = min([currentLimit, defaultLimit])
  ([IntegerEntry(keyLastLimitLeft, limitLeftUsdt),
    IntegerEntry(keyLastSavedTVL, lastTVL),
    IntegerEntry(keyLastAcresSellTime, now)], limitLeftUsdt * USDT2ACRES_MULTIPLIER )
}

# callback for secondary contracts
@Callable(i)
func saveLastTx() = {
  if (!containsElement([wlgContract], i.caller)) then throw("Access denied") else
  (prolog(i), 42)
}

@Callable(i)
func constructorV1(rest2Addr: String, oldAcrContract: String) = {
  if (i.caller != this) then throw("Permission denied") else
  let oldAcrContAddr = oldAcrContract.addressFromStringValue();
  [
    IntegerEntry(acresIssuedAmountKey, oldAcrContAddr.getIntegerValue(acresIssuedAmountKey)),
    BinaryEntry(acresAssetIdKey, oldAcrContAddr.getBinaryValue(acresAssetIdKey)),
    StringEntry(keyRest2Address(), rest2Addr),
    StringEntry(oldAcresContractKey, oldAcrContract)
  ]
}

@Callable(i)
func setBlocked(isBlocked: Boolean) = {
  if (i.caller != this) then throw("permission denied") else
  [BooleanEntry(keyBlocked(), isBlocked)]
}

@Callable(i)
func unstakeAcres(amount: Int) = {
  let prologActions = prolog(i)
  if (amount <= 0) then throw("Amount should be positive") else
  let address = i.caller.toString()
  if (i.payments.size() != 0) then throw("No payments required") else

  let (actions, wlgClaimedAmount) = stakeUnstakeAcresInternal(-amount, address)

  (actions :+ ScriptTransfer(i.caller, amount, acresAssetId) ++ prologActions, wlgClaimedAmount)
}

@Callable(i)
func stakeAcres() = {
  let prologActions = prolog(i)
  let address = i.caller.toString()
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  let pmt = i.payments[0]
  let amt = pmt.amount
  if (!pmt.assetId.isDefined() || pmt.assetId.value() != acresAssetId) then throw("ACRES payments only!") else
  let (actions, wlgClaimedAmount) = stakeUnstakeAcresInternal(amt, address)
  (actions ++ prologActions, wlgClaimedAmount)
}

# fixed price 10 USDT = 1 ACRES, equivalent amount of WLGOLD are burned
@Callable(i)
func buyAcres() = {
  let prologActions = prolog(i)
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  let pmt = i.payments[0]
  let usdtAmount = pmt.amount
  if (!pmt.assetId.isDefined() || pmt.assetId.value() != usdtAssetId) then throw("USDT payments only!") else
  if (usdtAmount < MULT6) then throw("Min payment should be " + MULT6.fixedPoint(6) + " USDT") else
  let acresAmount = usdtAmount * USDT2ACRES_MULTIPLIER
  let wlgAmount = fraction(usdtAmount, MULT8, getWlgPrice(usdtAmount))
  let oldAcresAddress = getStringValue(oldAcresContractKey).addressFromStringValue()
  strict req = oldAcresAddress.invoke("requestAcresCallback", [acresAmount], [])
  let wlgRemain = wlgContract.invoke("burnWlgold", [wlgAmount], []).asInt()

  ([ScriptTransfer(i.caller, acresAmount, acresAssetId)] ++ prologActions, wlgRemain)
}

# fixed price 10 USDT = 1 ACRES, equivalent amount of WLGOLD are burned
@Callable(i)
func buyAcresREADONLY(usdtAmount: Int) = {
  let acresAmount = usdtAmount * USDT2ACRES_MULTIPLIER
  let wlgToBurn = fraction(usdtAmount, MULT8, getWlgPrice(usdtAmount))

  ([], [acresAmount, MULT6, acresAmount, wlgToBurn]) # second acresAmount is placeholder (should be ignored)
}

# 50% USDT с контракта ACRES идут юзеру
@Callable(i)
func sellAcres() = {
  let prologActions = prolog(i)
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  let pmt = i.payments[0]
  let acresAmount = pmt.amount
  if (!pmt.assetId.isDefined() || pmt.assetId.value() != acresAssetId) then throw("ACRES payments only!") else
  if (acresAmount < MULT7) then throw("Min payment should be " + MULT7.fixedPoint(8) + " ACRES") else
  let addr = i.caller.toString()
  let (limitActions, maxAcres) = getSwapLimitAcres()
  if (acresAmount > maxAcres) then throw("You can sell max " + maxAcres.fixedPoint(8) + " ACRES") else
  let usdtAmount = acresAmount / USDT2ACRES_MULTIPLIER / 2
  (limitActions :+
    ScriptTransfer(i.caller, usdtAmount, usdtAssetId) ++ prologActions, usdtAmount)
}

# 50% USDT с контракта ACRES идут юзеру
@Callable(i)
func sellAcresREADONLY(address: String, acresAmount: Int) = {
  let (limitActions, maxAcres) = getSwapLimitAcres()
  let usdtAmount = acresAmount / USDT2ACRES_MULTIPLIER / 2
  ([], [usdtAmount, MULT7, maxAcres, 0])
}

# unstake all ACRES from old staking contract
# unstake all NFT lands, ducks, remove all resources, material, production from warehouses
# convert everything to ACRES, stake them to arces2 contract
# issue bonus NFT for FPOWER10
@Callable(i)
func convertOldStakes() = {
  let address = i.caller.toString()
  if (i.payments.size() != 0) then throw("No payments required") else

  let oldAcresAddress = getStringValue(oldAcresContractKey).addressFromStringValue()

  let amount = oldAcresAddress.getInteger(keyAcresStakedAmtByUser(address)).valueOrElse(0)
  let gotAcres0 = if (amount > 0) then 
    oldAcresAddress.invoke("unstakeAcresCallback", [amount, address], []).asTuple2Ints() else (0, 0) # (acres, wlg)
  
  let oldStakingAddress = oldStakingContractStr.addressFromStringValue()

  let landsStr = oldStakingAddress.getString(keyStakedLandsByOwner(address))
  let landsResult = if (landsStr.isDefined()) then {
    let lands = split_51C(landsStr.value(), "_")
    # acc: (acresAmount, res, mat, prod)
    func oneLand(acc: (Int, Int, Int, Int), landAssetId: String) = {
      if (landAssetId == "") then throw("landAssetId is required") else
      let r = oldStakingAddress.invoke("unstakeLandCallback", [landAssetId, address], []).asTuple5Ints()
      (acc._1 + r._1, acc._2 + r._2, acc._3 + r._3, acc._4 + r._4)
    }
    # (acresFromPieces: Int, acresFromRes: Int, acresFromMat: Int, acresFromProd: Int, wlgResult: Int)
    let rr = FOLD<100>(lands, (0, 0, 0, 0), oneLand)
    strict finalize = oldStakingAddress.invoke("unstakeLandsFinalizeCallback", [address], [])
    strict req = oldAcresAddress.invoke("requestAcresCallback", [rr._1 + rr._2 + rr._3 + rr._4], [])
    # issue bonusNFT
    let issue = Issue("FPOWER10", "FarmingPower +10% NFT for WavesLands game", 1, 0, false)
    (rr._1, rr._2, rr._3, rr._4, [issue, ScriptTransfer(i.caller, 1, calculateAssetId(issue))])
  } else (0, 0, 0, 0, [])

  # process duck staked
  let duckAssetId = oldStakingAddress.getString(keyStakedDuckByOwner(address)).valueOrElse("")
  let duckResult = if (duckAssetId != "") then {
    oldStakingAddress.invoke("unstakeDuckCallback", [duckAssetId, address], []).asTuple3Ints()
  } else {
    (0, 0, 0)
  }
  let x = stakeUnstakeAcresInternal(gotAcres0._1
    + landsResult._1 + landsResult._2 + landsResult._3 + landsResult._4
    + duckResult._1 + duckResult._2 + duckResult._3, address) # (actions, wlgResult)

  (landsResult._5 ++ x._1, x._2)
}

@Callable(i)
func unstakeLandsREADONLY(address: String) = {
  let oldStakingAddress = oldStakingContractStr.addressFromStringValue()

  let landsStr = oldStakingAddress.getString(keyStakedLandsByOwner(address))
  let landsResult = if (landsStr.isDefined()) then {
    let lands = split_51C(landsStr.value(), "_")
    # acc: (acresAmount, res, mat, prod)
    func oneLand(acc: (Int, Int, Int, Int), landAssetId: String) = {
      if (landAssetId == "") then throw("landAssetId is required") else
      let r = oldStakingAddress.invoke("unstakeLandREADONLY", [landAssetId, address], []).asTuple4Ints()
      (acc._1 + r._1, acc._2 + r._2, acc._3 + r._3, acc._4 + r._4)
    }
    # (acresFromPieces: Int, acresFromRes: Int, acresFromMat: Int, acresFromProd: Int)
    FOLD<100>(lands, (0, 0, 0, 0), oneLand)
  } else (0, 0, 0, 0)

  ([], landsResult)
}

@Callable(i)
func stakeAcresCallback(addr: String) = {
  if (i.caller != oldStakingContractStr.addressFromStringValue()) then throw("Permission denied") else

  stakeUnstakeAcresInternal(i.payments[0].amount, addr) # (actions, wlgResult)
}

@Callable(i)
func simulateStakeAcresREADONLY(address: String, addedAmount: Int) = {
  let amountKey = keyAcresStakedAmtByUser(address)
  let newAcresAmount = getInteger(amountKey).valueOrElse(0) + addedAmount
  let oldTotal = getInteger(acresStakdTotalKey).valueOrElse(0)
  let userFpKey = keyFarmingPowerByUser(address)
  let oldFp = getInteger(userFpKey).valueOrElse(0)
  let newFp = getFarmingPowerByAcres(newAcresAmount)
  let oldTotalFp = getInteger(totalFarmingPowerKey).valueOrElse(0)
  let newTotalFp = oldTotalFp - oldFp + newFp
([], [oldFp, newFp, oldTotalFp, newTotalFp])
}